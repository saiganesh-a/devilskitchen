package com.tcs.bancs.microservices.impl;

import java.io.IOException;
import java.sql.Clob;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Base64;

import javax.sql.rowset.serial.SerialException;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

//import com.tcs.bancs.microservices.RequestBean_CbsSix;
import com.tcs.bancs.microservices.db.model.Migenq_t1;
import com.tcs.bancs.microservices.db.model.Migenq_t2;
import com.tcs.bancs.microservices.db.model.Migenq_t3;
import com.tcs.bancs.microservices.db.model.Migenqpk_t1;
import com.tcs.bancs.microservices.db.model.Migenqpk_t2;
import com.tcs.bancs.microservices.db.model.Migenqpk_t3;
import com.tcs.bancs.microservices.exception.RrnException;
import com.tcs.bancs.microservices.exception.SrcException;

import com.tcs.bancs.microservices.repository.day.Migenq_t1DetailDayRepo;
import com.tcs.bancs.microservices.repository.ref.Migenq_t1DetailRefRepo;
import com.tcs.bancs.microservices.repository.ref.Migenq_t2DetailRefRepo;
//import com.tcs.log.utils.ClobToStringConverter;
//import com.tcs.log.utils.encryptLog;
import com.tcs.bancs.microservices.repository.ref.Migenq_t3DetailRefRepo;

@Service
public class MigenqDetailsRepositoryImpl {

    private final Migenq_t1DetailRefRepo dayRepo1;
    private final Migenq_t2DetailRefRepo dayRepo2;
    private final Migenq_t3DetailRefRepo dayRepo3;

    public MigenqDetailsRepositoryImpl(Migenq_t1DetailRefRepo dayRepo1, Migenq_t2DetailRefRepo dayRepo2, Migenq_t3DetailRefRepo dayRepo3) {
        super();
        this.dayRepo1 = dayRepo1;
        this.dayRepo2 = dayRepo2;
        this.dayRepo3 = dayRepo3;
    }

    public boolean saveInitialRequest(String REQ_STR, String CLIENT_IP, String TELLER_ID, String PK_REQ_REF_NO, String SRC_ID, String RECD_TIME, String IP_ADDRESS) throws SerialException, SQLException, IOException, RrnException, SrcException {

        DateTimeFormatter entryDate = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss:SSS");
        DateTimeFormatter entryDate1 = DateTimeFormatter.ofPattern("yyyy-MM-dd");
        LocalDateTime time = LocalDateTime.now();
        LocalDate date = LocalDate.now();
        int dayCount = date.getDayOfMonth();
        int Logsaver = dayCount % 3;

        if (PK_REQ_REF_NO == null || PK_REQ_REF_NO.length() >= 26 || PK_REQ_REF_NO.isEmpty()) {
            PK_REQ_REF_NO = " ";
        }
        if (SRC_ID == null || SRC_ID.length() >= 6 || SRC_ID.isEmpty()) {
            SRC_ID = " ";
        }

        if (PK_REQ_REF_NO == null) {
            throw new RrnException();
        } else if (SRC_ID == null) {
            throw new SrcException();
        }

        if (Logsaver == 1) {
            Migenq_t1 mig = new Migenq_t1();
            Migenqpk_t1 pk = new Migenqpk_t1();

            pk.setPK_REQ_REF_NO(PK_REQ_REF_NO);
            pk.setSRC_ID(SRC_ID);
            if (IP_ADDRESS == null || IP_ADDRESS.isEmpty() || IP_ADDRESS.length() > 20) {
                mig.setCLIENT_IP(" ");
            } else {
                mig.setCLIENT_IP(IP_ADDRESS);
            }
            if (TELLER_ID == null || TELLER_ID.isEmpty() || TELLER_ID.length() < 1 || TELLER_ID.matches(" ")) {
                mig.setTELLER_ID(" ");
            } else if (TELLER_ID.length() > 10) {
                mig.setTELLER_ID(TELLER_ID.substring(TELLER_ID.length() - 10, TELLER_ID.length()));
            } else {
                mig.setTELLER_ID(TELLER_ID);
            }

            pk.setENTRY_DATE(entryDate1.format(time));
            mig.setTXN_NO("070805");
            mig.setTXN_NAME("accountChannelEnq");
            mig.setREQ_STR(REQ_STR);
            mig.setRESP_STR("");  // Initially empty response string
            pk.setRECD_TIME(RECD_TIME);
            mig.setRESP_TIME(entryDate.format(time));
            mig.setMigpk(pk);
            dayRepo1.save(mig);

        } else if (Logsaver == 2) {
            Migenq_t2 mig2 = new Migenq_t2();
            Migenqpk_t2 pk2 = new Migenqpk_t2();

            pk2.setPK_REQ_REF_NO(PK_REQ_REF_NO);
            pk2.setSRC_ID(SRC_ID);
            if (IP_ADDRESS == null || IP_ADDRESS.isEmpty() || IP_ADDRESS.length() > 20) {
                mig2.setCLIENT_IP(" ");
            } else {
                mig2.setCLIENT_IP(IP_ADDRESS);
            }
            if (TELLER_ID == null || TELLER_ID.isEmpty() || TELLER_ID.length() < 1 || TELLER_ID.matches(" ")) {
                mig2.setTELLER_ID(" ");
            } else if (TELLER_ID.length() > 10) {
                mig2.setTELLER_ID(TELLER_ID.substring(TELLER_ID.length() - 10, TELLER_ID.length()));
            } else {
                mig2.setTELLER_ID(TELLER_ID);
            }

            mig2.setENTRY_DATE(entryDate1.format(time));
            mig2.setTXN_NO("070805");
            mig2.setTXN_NAME("accountChannelEnq");
            mig2.setREQ_STR(REQ_STR);
            mig2.setRESP_STR("");  // Initially empty response string
            mig2.setRECD_TIME(RECD_TIME);
            mig2.setRESP_TIME(entryDate.format(time));
            mig2.setMigpk(pk2);
            dayRepo2.save(mig2);

        } else if (Logsaver == 0) {
            Migenq_t3 mig3 = new Migenq_t3();
            Migenqpk_t3 pk3 = new Migenqpk_t3();

            pk3.setPK_REQ_REF_NO(PK_REQ_REF_NO);
            pk3.setSRC_ID(SRC_ID);
            if (IP_ADDRESS == null || IP_ADDRESS.isEmpty() || IP_ADDRESS.length() > 20) {
                mig3.setCLIENT_IP(" ");
            } else {
                mig3.setCLIENT_IP(IP_ADDRESS);
            }
            if (TELLER_ID == null || TELLER_ID.isEmpty() || TELLER_ID.length() < 1 || TELLER_ID.matches(" ")) {
                mig3.setTELLER_ID(" ");
            } else if (TELLER_ID.length() > 10) {
                mig3.setTELLER_ID(TELLER_ID.substring(TELLER_ID.length() - 10, TELLER_ID.length()));
            } else {
                mig3.setTELLER_ID(TELLER_ID);
            }

            pk3.setENTRY_DATE(entryDate1.format(time));
            mig3.setTXN_NO("070805");
            mig3.setTXN_NAME("accountChannelEnq");
            mig3.setREQ_STR(REQ_STR);
           mig3.setRESP_STR("");  // Initially empty response string
            pk3.setRECD_TIME(RECD_TIME);
            mig3.setRESP_TIME(entryDate.format(time));
            mig3.setMigpk(pk3);
            dayRepo3.save(mig3);
        }

        return true;
    }

    public boolean updateResponse(String PK_REQ_REF_NO, String SRC_ID, String RESPONSE_STATUS, String RESPONSE_STRING, String ERROR_CODE, String ERROR_DESCRIPTION, String RECD_TIME) throws SerialException, SQLException, IOException, RrnException, SrcException {

        DateTimeFormatter entryDate = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss:SSS");
        DateTimeFormatter entryDate1 = DateTimeFormatter.ofPattern("yyyy-MM-dd");
        LocalDateTime time = LocalDateTime.now();
        Clob clob = new javax.sql.rowset.serial.SerialClob(RESPONSE_STRING.toCharArray());

        int Logsaver = LocalDate.now().getDayOfMonth() % 3;

        if (PK_REQ_REF_NO == null) {
            throw new RrnException();
        } else if (SRC_ID == null) {
            throw new SrcException();
        }

        if (Logsaver == 1) {
        	Migenqpk_t1 pk = new Migenqpk_t1();
        	pk.setPK_REQ_REF_NO(PK_REQ_REF_NO);
        	pk.setSRC_ID(SRC_ID);
        	pk.setRECD_TIME(RECD_TIME);
        	pk.setENTRY_DATE(entryDate1.format(time));
     
            Migenq_t1 mig = dayRepo1.findById(pk).orElseThrow(() -> new RuntimeException("Record not found"));
            mig.setRESPONSE_STATUS(RESPONSE_STATUS);
            mig.setERROR_CODE(ERROR_CODE);
            mig.setERROR_DESCRIPTION(ERROR_DESCRIPTION);
            mig.setRESPONSE_STRING(clob);
            mig.setRESP_TIME(entryDate.format(time));
            dayRepo1.save(mig);

        } else if (Logsaver == 2) {
        	Migenqpk_t2 pk = new Migenqpk_t2();
        	pk.setPK_REQ_REF_NO(PK_REQ_REF_NO);
        	pk.setSRC_ID(SRC_ID);
//        	pk.setRECD_TIME(RECD_TIME);
//        	pk.setENTRY_DATE(entryDate1.format(time));
//        	System.out.println("pk : " + pk + pk.getPK_REQ_REF_NO() + pk.getSRC_ID() + pk.getRECD_TIME() +pk.getENTRY_DATE());
        	System.out.println("Hi" + dayRepo2.findById(pk));
            Migenq_t2 mig2 = dayRepo2.findById(pk).orElseThrow(() -> new RuntimeException("Record not found"));
            System.out.println("Mig2" +mig2);
            mig2.setRESPONSE_STATUS(RESPONSE_STATUS);
            mig2.setERROR_CODE(ERROR_CODE);
            mig2.setERROR_DESCRIPTION(ERROR_DESCRIPTION);
            mig2.setRESPONSE_STRING(clob);
            mig2.setRESP_TIME(entryDate.format(time));
            System.out.println("before update---------------------------------------------------------------");
            dayRepo2.save(mig2);
            System.out.println("after update222222222222222222222222222222222222222222222222222222222222222222");

        } else if (Logsaver == 0) {
        	Migenqpk_t3 pk = new Migenqpk_t3();
        	pk.setPK_REQ_REF_NO(PK_REQ_REF_NO);
        	pk.setSRC_ID(SRC_ID);
        	pk.setRECD_TIME(RECD_TIME);
        	pk.setENTRY_DATE(entryDate1.format(time));
            Migenq_t3 mig3 = dayRepo3.findById(pk).orElseThrow(() -> new RuntimeException("Record not found"));
            mig3.setRESPONSE_STATUS(RESPONSE_STATUS);
            mig3.setERROR_CODE(ERROR_CODE);
            mig3.setERROR_DESCRIPTION(ERROR_DESCRIPTION);
            mig3.setRESPONSE_STRING(clob);
            mig3.setRESP_TIME(entryDate.format(time));
            dayRepo3.save(mig3);
        }

        return true;
    }
}



before update---------------------------------------------------------------
2024-08-05 17:54:20,664 DEBUG org.springframework.orm.jpa.JpaTransactionManager [http-nio-10.243.6.71-1003-exec-1] Found thread-bound EntityManager [SessionImpl(1400955218<open>)] for JPA transaction
||getCustomerDetails|2024-08-05 17:54:20,664 DEBUG org.springframework.transaction.support.AbstractPlatformTransactionManager [http-nio-10.243.6.71-1003-exec-1] Creating new transaction with name [org.springframework.data.jpa.repository.support.SimpleJpaRepository.save]: PROPAGATION_REQUIRED,ISOLATION_DEFAULT
||getCustomerDetails|2024-08-05 17:54:20,664 DEBUG org.springframework.orm.jpa.JpaTransactionManager [http-nio-10.243.6.71-1003-exec-1] Exposing JPA transaction as JDBC [org.springframework.orm.jpa.vendor.HibernateJpaDialect$HibernateConnectionHandle@289d23f0]
||getCustomerDetails|2024-08-05 17:54:20,672 DEBUG org.springframework.transaction.support.AbstractPlatformTransactionManager [http-nio-10.243.6.71-1003-exec-1] Initiating transaction commit
||getCustomerDetails|2024-08-05 17:54:20,672 DEBUG org.springframework.orm.jpa.JpaTransactionManager [http-nio-10.243.6.71-1003-exec-1] Committing JPA transaction on EntityManager [SessionImpl(1400955218<open>)]
||getCustomerDetails|2024-08-05 17:54:20,672 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [http-nio-10.243.6.71-1003-exec-1] update Migenq_t2 set CLIENT_IP=?, ENTRY_DATE=?, ERROR_CODE=?, ERROR_DESCRIPTION=?, RECD_TIME=?, REQ_STR=?, RESPONSE_STATUS=?, RESPONSE_STRING=?, RESP_STR=?, RESP_TIME=?, TELLER_ID=?, TXN_NAME=?, TXN_NO=? where PK_REQ_REF_NO=? and SRC_ID=?
||getCustomerDetails|Hibernate: update Migenq_t2 set CLIENT_IP=?, ENTRY_DATE=?, ERROR_CODE=?, ERROR_DESCRIPTION=?, RECD_TIME=?, REQ_STR=?, RESPONSE_STATUS=?, RESPONSE_STRING=?, RESP_STR=?, RESP_TIME=?, TELLER_ID=?, TXN_NAME=?, TXN_NO=? where PK_REQ_REF_NO=? and SRC_ID=?
2024-08-05 17:54:20,672 TRACE org.hibernate.type.descriptor.sql.BasicBinder [http-nio-10.243.6.71-1003-exec-1] binding parameter [1] as [VARCHAR] - [10.243.6.71]
||getCustomerDetails|2024-08-05 17:54:20,672 TRACE org.hibernate.type.descriptor.sql.BasicBinder [http-nio-10.243.6.71-1003-exec-1] binding parameter [2] as [VARCHAR] - [2024-08-05]
||getCustomerDetails|2024-08-05 17:54:20,672 TRACE org.hibernate.type.descriptor.sql.BasicBinder [http-nio-10.243.6.71-1003-exec-1] binding parameter [3] as [VARCHAR] - [0000]
||getCustomerDetails|2024-08-05 17:54:20,672 TRACE org.hibernate.type.descriptor.sql.BasicBinder [http-nio-10.243.6.71-1003-exec-1] binding parameter [4] as [VARCHAR] - [Ok! Success]
||getCustomerDetails|2024-08-05 17:54:20,672 TRACE org.hibernate.type.descriptor.sql.BasicBinder [http-nio-10.243.6.71-1003-exec-1] binding parameter [5] as [VARCHAR] - [2024-08-05 17:54:19:771]
||getCustomerDetails|2024-08-05 17:54:20,672 TRACE org.hibernate.type.descriptor.sql.BasicBinder [http-nio-10.243.6.71-1003-exec-1] binding parameter [6] as [VARCHAR] - [{Reference Number : 0112145,Teller Number : 164,Branch Number : 04234,option : 02,first_name : null,last_name : null,date_of_birth : null,pf_number : 00000172,mobile_number : null}]
||getCustomerDetails|2024-08-05 17:54:20,672 TRACE org.hibernate.type.descriptor.sql.BasicBinder [http-nio-10.243.6.71-1003-exec-1] binding parameter [7] as [VARCHAR] - [Y]
||getCustomerDetails|2024-08-05 17:54:20,672 TRACE org.hibernate.type.descriptor.sql.BasicBinder [http-nio-10.243.6.71-1003-exec-1] binding parameter [8] as [CLOB] - [{clob}]
||getCustomerDetails|2024-08-05 17:54:20,672 TRACE org.hibernate.type.descriptor.sql.BasicBinder [http-nio-10.243.6.71-1003-exec-1] binding parameter [9] as [VARCHAR] - []
||getCustomerDetails|2024-08-05 17:54:20,672 TRACE org.hibernate.type.descriptor.sql.BasicBinder [http-nio-10.243.6.71-1003-exec-1] binding parameter [10] as [VARCHAR] - [2024-08-05 17:54:20:649]
||getCustomerDetails|2024-08-05 17:54:20,672 TRACE org.hibernate.type.descriptor.sql.BasicBinder [http-nio-10.243.6.71-1003-exec-1] binding parameter [11] as [VARCHAR] - [164]
||getCustomerDetails|2024-08-05 17:54:20,672 TRACE org.hibernate.type.descriptor.sql.BasicBinder [http-nio-10.243.6.71-1003-exec-1] binding parameter [12] as [VARCHAR] - [accountChannelEnq]
||getCustomerDetails|2024-08-05 17:54:20,672 TRACE org.hibernate.type.descriptor.sql.BasicBinder [http-nio-10.243.6.71-1003-exec-1] binding parameter [13] as [VARCHAR] - [070805]
||getCustomerDetails|2024-08-05 17:54:20,672 TRACE org.hibernate.type.descriptor.sql.BasicBinder [http-nio-10.243.6.71-1003-exec-1] binding parameter [14] as [VARCHAR] - [0112145]
||getCustomerDetails|2024-08-05 17:54:20,672 TRACE org.hibernate.type.descriptor.sql.BasicBinder [http-nio-10.243.6.71-1003-exec-1] binding parameter [15] as [VARCHAR] - [00001]
||getCustomerDetails|2024-08-05 17:54:20,680 DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger [http-nio-10.243.6.71-1003-exec-1] select migenq_t2x0_.PK_REQ_REF_NO as pk_req_ref_no1_1_0_, migenq_t2x0_.SRC_ID as src_id2_1_0_, migenq_t2x0_.CLIENT_IP as client_ip3_1_0_, migenq_t2x0_.ENTRY_DATE as entry_date4_1_0_, migenq_t2x0_.ERROR_CODE as error_code5_1_0_, migenq_t2x0_.ERROR_DESCRIPTION as error_description6_1_0_, migenq_t2x0_.RECD_TIME as recd_time7_1_0_, migenq_t2x0_.REQ_STR as req_str8_1_0_, migenq_t2x0_.RESPONSE_STATUS as response_status9_1_0_, migenq_t2x0_.RESPONSE_STRING as response_string10_1_0_, migenq_t2x0_.RESP_STR as resp_str11_1_0_, migenq_t2x0_.RESP_TIME as resp_time12_1_0_, migenq_t2x0_.TELLER_ID as teller_id13_1_0_, migenq_t2x0_.TXN_NAME as txn_name14_1_0_, migenq_t2x0_.TXN_NO as txn_no15_1_0_ from Migenq_t2 migenq_t2x0_ where migenq_t2x0_.PK_REQ_REF_NO=? and migenq_t2x0_.SRC_ID=?
||getCustomerDetails|Hibernate: select migenq_t2x0_.PK_REQ_REF_NO as pk_req_ref_no1_1_0_, migenq_t2x0_.SRC_ID as src_id2_1_0_, migenq_t2x0_.CLIENT_IP as client_ip3_1_0_, migenq_t2x0_.ENTRY_DATE as entry_date4_1_0_, migenq_t2x0_.ERROR_CODE as error_code5_1_0_, migenq_t2x0_.ERROR_DESCRIPTION as error_description6_1_0_, migenq_t2x0_.RECD_TIME as recd_time7_1_0_, migenq_t2x0_.REQ_STR as req_str8_1_0_, migenq_t2x0_.RESPONSE_STATUS as response_status9_1_0_, migenq_t2x0_.RESPONSE_STRING as response_string10_1_0_, migenq_t2x0_.RESP_STR as resp_str11_1_0_, migenq_t2x0_.RESP_TIME as resp_time12_1_0_, migenq_t2x0_.TELLER_ID as teller_id13_1_0_, migenq_t2x0_.TXN_NAME as txn_name14_1_0_, migenq_t2x0_.TXN_NO as txn_no15_1_0_ from Migenq_t2 migenq_t2x0_ where migenq_t2x0_.PK_REQ_REF_NO=? and migenq_t2x0_.SRC_ID=?
2024-08-05 17:54:20,680 TRACE org.hibernate.type.descriptor.sql.BasicBinder [http-nio-10.243.6.71-1003-exec-1] binding parameter [1] as [VARCHAR] - [0112145]
||getCustomerDetails|2024-08-05 17:54:20,680 TRACE org.hibernate.type.descriptor.sql.BasicBinder [http-nio-10.243.6.71-1003-exec-1] binding parameter [2] as [VARCHAR] - [00001]
||getCustomerDetails|2024-08-05 17:54:20,680 DEBUG org.springframework.transaction.support.AbstractPlatformTransactionManager [http-nio-10.243.6.71-1003-exec-1] Initiating transaction rollback after commit exception
||getCustomerDetails|org.springframework.orm.ObjectOptimisticLockingFailureException: Object of class [com.tcs.bancs.microservices.db.model.Migenq_t2] with identifier [com.tcs.bancs.microservices.db.model.Migenqpk_t2@1797593]: optimistic locking failed; nested exception is org.hibernate.StaleObjectStateException: Row was updated or deleted by another transaction (or unsaved-value mapping was incorrect) : [com.tcs.bancs.microservices.db.model.Migenq_t2#com.tcs.bancs.microservices.db.model.Migenqpk_t2@1797593]
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:337)
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:255)
---------------------------------



The image shows a microservice architecture diagram, illustrating the flow of data and interactions between various components. Here's a brief description of each part:

1. **Database**:
   - **NR, DR, PR**: These likely represent different types of databases or database tables (possibly for various environments like Non-Relational, Development, and Production).
   - **DB**: The main database where data is stored.

2. **Business Logic Processing Layer**:
   - **JVM/COBOL**: This indicates that the business logic is handled using a combination of Java Virtual Machine (JVM) and COBOL. COBOL programs are executed within the JVM.
   - **Logs**: This component is responsible for logging activities within the business logic layer.

3. **Integration Layer**:
   - **Java/Spring**: This part handles integration and is built using Java and the Spring framework, indicating the use of Spring Boot for microservices.

4. **API Gateway**:
   - Acts as an entry point for clients (channels) to interact with the microservices. It routes requests to the appropriate microservices and handles concerns like security, load balancing, and rate limiting.

5. **Channels**:
   - Represents various user interfaces or systems that interact with the microservices through the API Gateway.

6. **Banklink/NBC**:
   - This component likely represents an external banking system or service that the microservice architecture interacts with.

Overall, the diagram outlines a microservice-based approach to handling business logic and data processing, utilizing a mix of legacy and modern technologies (COBOL and Java/Spring) and ensuring smooth integration through an API Gateway.



-----------------------------------------------------------


package com.tcs.bancs.microservices.impl;

import java.io.IOException;
import java.sql.Clob;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Base64;

import javax.sql.rowset.serial.SerialException;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

//import com.tcs.bancs.microservices.RequestBean_CbsSix;
import com.tcs.bancs.microservices.db.model.Migenq_t1;
import com.tcs.bancs.microservices.db.model.Migenq_t2;
import com.tcs.bancs.microservices.db.model.Migenq_t3;
import com.tcs.bancs.microservices.db.model.Migenqpk_t1;
import com.tcs.bancs.microservices.db.model.Migenqpk_t2;
import com.tcs.bancs.microservices.db.model.Migenqpk_t3;
import com.tcs.bancs.microservices.exception.RrnException;
import com.tcs.bancs.microservices.exception.SrcException;

import com.tcs.bancs.microservices.repository.day.Migenq_t1DetailDayRepo;
import com.tcs.bancs.microservices.repository.ref.Migenq_t1DetailRefRepo;
import com.tcs.bancs.microservices.repository.ref.Migenq_t2DetailRefRepo;
//import com.tcs.log.utils.ClobToStringConverter;
//import com.tcs.log.utils.encryptLog;
import com.tcs.bancs.microservices.repository.ref.Migenq_t3DetailRefRepo;

@Service
public class MigenqDetailsRepositoryImpl {
	
	 
	private final Migenq_t1DetailRefRepo dayRepo1;
	private final Migenq_t2DetailRefRepo dayRepo2;
	private final Migenq_t3DetailRefRepo dayRepo3;

	public MigenqDetailsRepositoryImpl(Migenq_t1DetailRefRepo dayRepo1, Migenq_t2DetailRefRepo dayRepo2,
			Migenq_t3DetailRefRepo dayRepo3) {
		super();
		this.dayRepo1 = dayRepo1;
		this.dayRepo2 = dayRepo2;
		this.dayRepo3 = dayRepo3;
	}

	public boolean LogData(String RESPONSE_STATUS,String REQ_STR,String RESP_STR, String CLIENT_IP, String TELLER_ID, String ERROR_CODE, String ERROR_DESCRIPTION,String PK_REQ_REF_NO, String SRC_ID,String RESPONSE_STRING,String RECD_TIME,String IP_ADDRESS) throws SerialException, SQLException, IOException, RrnException, SrcException {
		
		DateTimeFormatter entryDate = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss:SSS");
		DateTimeFormatter entryDate1 = DateTimeFormatter.ofPattern("yyyy-MM-dd");
		LocalDateTime time = LocalDateTime.now();
		//RequestBean_CbsSix req = new RequestBean_CbsSix();
		LocalDate date = LocalDate.now();
		int dayCount =date.getDayOfMonth();
		int Logsaver=dayCount%3;
		if (PK_REQ_REF_NO == null || PK_REQ_REF_NO.length()>=26 || PK_REQ_REF_NO.isEmpty() ) {
			PK_REQ_REF_NO = " ";
		}
		if(SRC_ID == null || SRC_ID.length()>=6 || SRC_ID.isEmpty()){
			SRC_ID=" ";
		}
		
	 if(PK_REQ_REF_NO==null ) {
			
			 throw new RrnException();
		 }else if(SRC_ID==null) {
			 throw new SrcException();
		 }
	 
		if(Logsaver==1) {
		Migenq_t1 mig =new Migenq_t1(); 
		Migenqpk_t1 pk=new Migenqpk_t1();
		
		pk.setPK_REQ_REF_NO(PK_REQ_REF_NO);
		pk.setSRC_ID(SRC_ID);
		if(IP_ADDRESS==null||IP_ADDRESS.isEmpty()||IP_ADDRESS.length()>20){
			mig.setCLIENT_IP(" ");
		}else{
		mig.setCLIENT_IP(IP_ADDRESS);
		}
		if(TELLER_ID == null||TELLER_ID.isEmpty()||TELLER_ID.length()<1 || TELLER_ID.matches(" ")) {
		      
			mig.setTELLER_ID(" ");
			
		}

	else if (TELLER_ID.length()>10 ){

			
		mig.setTELLER_ID(TELLER_ID.substring(TELLER_ID.length()-10,TELLER_ID.length()));
		}else
		{
		
			mig.setTELLER_ID(TELLER_ID);

		}

		pk.setENTRY_DATE(entryDate1.format(time));
		mig.setTXN_NO("070805");
		mig.setTXN_NAME("accountChannelEnq");							
		mig.setRESPONSE_STATUS(RESPONSE_STATUS);
		mig.setERROR_CODE(ERROR_CODE);
		mig.setERROR_DESCRIPTION(ERROR_DESCRIPTION);
		mig.setREQ_STR(REQ_STR);
		mig.setRESP_STR(RESPONSE_STRING);
		pk.setRECD_TIME(RECD_TIME);
		mig.setRESP_TIME(entryDate.format(time));
		mig.setMigpk(pk);
		Clob clob=new javax.sql.rowset.serial.SerialClob(RESP_STR.toCharArray());
        mig.setRESPONSE_STRING(clob);
        dayRepo1.save(mig);

		}else if(Logsaver==2) {
			Migenq_t2 mig2 =new Migenq_t2();
			Migenqpk_t2 pk2=new Migenqpk_t2();
//			if(RESP_STR.equals("") && RESPONSE_STATUS.equals(""))
//			{
			String originalId = pk2.getPK_REQ_REF_NO();
			System.out.println("Org" +originalId);
			pk2.setPK_REQ_REF_NO(PK_REQ_REF_NO);
			pk2.setSRC_ID(SRC_ID);
			if(IP_ADDRESS==null||IP_ADDRESS.isEmpty()||IP_ADDRESS.length()>20){
				mig2.setCLIENT_IP(" ");
			}else{
			mig2.setCLIENT_IP(IP_ADDRESS);
			}
			if(TELLER_ID == null||TELLER_ID.isEmpty()||TELLER_ID.length()<1 || TELLER_ID.matches(" ")) {
			      
				mig2.setTELLER_ID(" ");
				
			}
		
			if(TELLER_ID == null||TELLER_ID.isEmpty()||TELLER_ID.length()<1 || TELLER_ID.matches(" ")) {
			      
				mig2.setTELLER_ID(" ");
				
			}
		
		else if (TELLER_ID.length()>10 ){
			
			
				
			mig2.setTELLER_ID(TELLER_ID.substring(TELLER_ID.length()-10,TELLER_ID.length()));
			}else
			{
				
				mig2.setTELLER_ID(TELLER_ID);

			}
			pk2.setENTRY_DATE(entryDate1.format(time));
			mig2.setTXN_NO("070805");
			mig2.setTXN_NAME("accountChannelEnq");							
			mig2.setRESPONSE_STATUS(RESPONSE_STATUS);
			mig2.setERROR_CODE(ERROR_CODE);
			mig2.setERROR_DESCRIPTION(ERROR_DESCRIPTION);
			mig2.setREQ_STR(REQ_STR);
			mig2.setRESP_STR(RESPONSE_STRING);
			pk2.setRECD_TIME(RECD_TIME);
			mig2.setRESP_TIME(entryDate.format(time));
			mig2.setMigpk(pk2);
			Clob clob=new javax.sql.rowset.serial.SerialClob(RESP_STR.toCharArray());
	        mig2.setRESPONSE_STRING(clob);
	        dayRepo2.save(mig2);
			// }
			}
		else if(Logsaver==0) {
			Migenq_t3 mig3 =new Migenq_t3();
			Migenqpk_t3 pk3=new Migenqpk_t3();
			pk3.setPK_REQ_REF_NO(PK_REQ_REF_NO);
			pk3.setSRC_ID(SRC_ID);
			if(IP_ADDRESS==null||IP_ADDRESS.isEmpty()||IP_ADDRESS.length()>20){
				mig3.setCLIENT_IP(" ");
			}else{
			mig3.setCLIENT_IP(IP_ADDRESS);
			}
			if(TELLER_ID == null||TELLER_ID.isEmpty()||TELLER_ID.length()<1 || TELLER_ID.matches(" ")) {
			      
				mig3.setTELLER_ID(" ");
				
			}
			if(TELLER_ID == null||TELLER_ID.isEmpty()||TELLER_ID.length()<1 || TELLER_ID.matches(" ")) {
	      
					mig3.setTELLER_ID(" ");
					
				}
		
			else if (TELLER_ID.length()>10 ){
				
			
					
				mig3.setTELLER_ID(TELLER_ID.substring(TELLER_ID.length()-10,TELLER_ID.length()));
				}else
				{
			
					mig3.setTELLER_ID(TELLER_ID);

				}
			pk3.setENTRY_DATE(entryDate1.format(time));
			mig3.setTXN_NO("070805");
			mig3.setTXN_NAME("accountChannelEnq");							
			mig3.setRESPONSE_STATUS(RESPONSE_STATUS);
			mig3.setERROR_CODE(ERROR_CODE);
			mig3.setERROR_DESCRIPTION(ERROR_DESCRIPTION);
			mig3.setREQ_STR(REQ_STR);
			mig3.setRESP_STR(RESPONSE_STRING);
			pk3.setRECD_TIME(RECD_TIME);
			mig3.setRESP_TIME(entryDate.format(time));
			mig3.setMigpk(pk3);
			Clob clob=new javax.sql.rowset.serial.SerialClob(RESP_STR.toCharArray());
	        mig3.setRESPONSE_STRING(clob);
	        dayRepo3.save(mig3);
			
			} 
		
	return false;
		
	}
}
-----------------

@Service
public class MigenqDetailsRepositoryImpl {

    private final Migenq_t1DetailRefRepo dayRepo1;
    private final Migenq_t2DetailRefRepo dayRepo2;
    private final Migenq_t3DetailRefRepo dayRepo3;

    public MigenqDetailsRepositoryImpl(Migenq_t1DetailRefRepo dayRepo1, Migenq_t2DetailRefRepo dayRepo2, Migenq_t3DetailRefRepo dayRepo3) {
        super();
        this.dayRepo1 = dayRepo1;
        this.dayRepo2 = dayRepo2;
        this.dayRepo3 = dayRepo3;
    }

    public boolean saveInitialRequest(String REQ_STR, String CLIENT_IP, String TELLER_ID, String PK_REQ_REF_NO, String SRC_ID, String RECD_TIME, String IP_ADDRESS) throws SerialException, SQLException, IOException, RrnException, SrcException {

        DateTimeFormatter entryDate = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss:SSS");
        DateTimeFormatter entryDate1 = DateTimeFormatter.ofPattern("yyyy-MM-dd");
        LocalDateTime time = LocalDateTime.now();
        LocalDate date = LocalDate.now();
        int dayCount = date.getDayOfMonth();
        int Logsaver = dayCount % 3;

        if (PK_REQ_REF_NO == null || PK_REQ_REF_NO.length() >= 26 || PK_REQ_REF_NO.isEmpty()) {
            PK_REQ_REF_NO = " ";
        }
        if (SRC_ID == null || SRC_ID.length() >= 6 || SRC_ID.isEmpty()) {
            SRC_ID = " ";
        }

        if (PK_REQ_REF_NO == null) {
            throw new RrnException();
        } else if (SRC_ID == null) {
            throw new SrcException();
        }

        if (Logsaver == 1) {
            Migenq_t1 mig = new Migenq_t1();
            Migenqpk_t1 pk = new Migenqpk_t1();

            pk.setPK_REQ_REF_NO(PK_REQ_REF_NO);
            pk.setSRC_ID(SRC_ID);
            if (IP_ADDRESS == null || IP_ADDRESS.isEmpty() || IP_ADDRESS.length() > 20) {
                mig.setCLIENT_IP(" ");
            } else {
                mig.setCLIENT_IP(IP_ADDRESS);
            }
            if (TELLER_ID == null || TELLER_ID.isEmpty() || TELLER_ID.length() < 1 || TELLER_ID.matches(" ")) {
                mig.setTELLER_ID(" ");
            } else if (TELLER_ID.length() > 10) {
                mig.setTELLER_ID(TELLER_ID.substring(TELLER_ID.length() - 10, TELLER_ID.length()));
            } else {
                mig.setTELLER_ID(TELLER_ID);
            }

            pk.setENTRY_DATE(entryDate1.format(time));
            mig.setTXN_NO("070805");
            mig.setTXN_NAME("accountChannelEnq");
            mig.setREQ_STR(REQ_STR);
            mig.setRESP_STR("");  // Initially empty response string
            pk.setRECD_TIME(RECD_TIME);
            mig.setRESP_TIME(entryDate.format(time));
            mig.setMigpk(pk);
            dayRepo1.save(mig);

        } else if (Logsaver == 2) {
            Migenq_t2 mig2 = new Migenq_t2();
            Migenqpk_t2 pk2 = new Migenqpk_t2();

            pk2.setPK_REQ_REF_NO(PK_REQ_REF_NO);
            pk2.setSRC_ID(SRC_ID);
            if (IP_ADDRESS == null || IP_ADDRESS.isEmpty() || IP_ADDRESS.length() > 20) {
                mig2.setCLIENT_IP(" ");
            } else {
                mig2.setCLIENT_IP(IP_ADDRESS);
            }
            if (TELLER_ID == null || TELLER_ID.isEmpty() || TELLER_ID.length() < 1 || TELLER_ID.matches(" ")) {
                mig2.setTELLER_ID(" ");
            } else if (TELLER_ID.length() > 10) {
                mig2.setTELLER_ID(TELLER_ID.substring(TELLER_ID.length() - 10, TELLER_ID.length()));
            } else {
                mig2.setTELLER_ID(TELLER_ID);
            }

            pk2.setENTRY_DATE(entryDate1.format(time));
            mig2.setTXN_NO("070805");
            mig2.setTXN_NAME("accountChannelEnq");
            mig2.setREQ_STR(REQ_STR);
            mig2.setRESP_STR("");  // Initially empty response string
            pk2.setRECD_TIME(RECD_TIME);
            mig2.setRESP_TIME(entryDate.format(time));
            mig2.setMigpk(pk2);
            dayRepo2.save(mig2);

        } else if (Logsaver == 0) {
            Migenq_t3 mig3 = new Migenq_t3();
            Migenqpk_t3 pk3 = new Migenqpk_t3();

            pk3.setPK_REQ_REF_NO(PK_REQ_REF_NO);
            pk3.setSRC_ID(SRC_ID);
            if (IP_ADDRESS == null || IP_ADDRESS.isEmpty() || IP_ADDRESS.length() > 20) {
                mig3.setCLIENT_IP(" ");
            } else {
                mig3.setCLIENT_IP(IP_ADDRESS);
            }
            if (TELLER_ID == null || TELLER_ID.isEmpty() || TELLER_ID.length() < 1 || TELLER_ID.matches(" ")) {
                mig3.setTELLER_ID(" ");
            } else if (TELLER_ID.length() > 10) {
                mig3.setTELLER_ID(TELLER_ID.substring(TELLER_ID.length() - 10, TELLER_ID.length()));
            } else {
                mig3.setTELLER_ID(TELLER_ID);
            }

            pk3.setENTRY_DATE(entryDate1.format(time));
            mig3.setTXN_NO("070805");
            mig3.setTXN_NAME("accountChannelEnq");
            mig3.setREQ_STR(REQ_STR);
            mig3.setRESP_STR("");  // Initially empty response string
            pk3.setRECD_TIME(RECD_TIME);
            mig3.setRESP_TIME(entryDate.format(time));
            mig3.setMigpk(pk3);
            dayRepo3.save(mig3);
        }

        return true;
    }

    public boolean updateResponse(String PK_REQ_REF_NO, String SRC_ID, String RESPONSE_STATUS, String RESPONSE_STRING, String ERROR_CODE, String ERROR_DESCRIPTION) throws SerialException, SQLException, IOException, RrnException, SrcException {

        DateTimeFormatter entryDate = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss:SSS");
        LocalDateTime time = LocalDateTime.now();
        Clob clob = new javax.sql.rowset.serial.SerialClob(RESPONSE_STRING.toCharArray());

        int Logsaver = LocalDate.now().getDayOfMonth() % 3;

        if (PK_REQ_REF_NO == null) {
            throw new RrnException();
        } else if (SRC_ID == null) {
            throw new SrcException();
        }

        if (Logsaver == 1) {
            Migenq_t1 mig = dayRepo1.findById(new Migenqpk_t1(PK_REQ_REF_NO, SRC_ID)).orElseThrow(() -> new RuntimeException("Record not found"));
            mig.setRESPONSE_STATUS(RESPONSE_STATUS);
            mig.setERROR_CODE(ERROR_CODE);
            mig.setERROR_DESCRIPTION(ERROR_DESCRIPTION);
            mig.setRESPONSE_STRING(clob);
            mig.setRESP_TIME(entryDate.format(time));
            dayRepo1.save(mig);

        } else if (Logsaver == 2) {
            Migenq_t2 mig2 = dayRepo2.findById(new Migenqpk_t2(PK_REQ_REF_NO, SRC_ID)).orElseThrow(() -> new RuntimeException("Record not found"));
            mig2.setRESPONSE_STATUS(RESPONSE_STATUS);
            mig2.setERROR_CODE(ERROR_CODE);
            mig2.setERROR_DESCRIPTION(ERROR_DESCRIPTION);
            mig2.setRESPONSE_STRING(clob);
            mig2.setRESP_TIME(entryDate.format(time));
            dayRepo2.save(mig2);

        } else if (Logsaver == 0) {
            Migenq_t3 mig3 = dayRepo3.findById(new Migenqpk_t3(PK_REQ_REF_NO, SRC_ID)).orElseThrow(() -> new RuntimeException("Record not found"));
            mig3.setRESPONSE_STATUS(RESPONSE_STATUS);
            mig3.setERROR_CODE(ERROR_CODE);
            mig3.setERROR_DESCRIPTION(ERROR_DESCRIPTION);
            mig3.setRESPONSE_STRING(clob);
            mig3.setRESP_TIME(entryDate.format(time));
            dayRepo3.save(mig3);
        }

        return true;
    }
}

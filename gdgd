https://repo1.maven.org/maven2/org/json/json/20210307/json-20210307.jar


import org.json.JSONObject;
import java.util.Scanner;

public class StringToJson {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Take input from the user
        System.out.println("Enter a string to convert to JSON format:");
        String input = scanner.nextLine();

        // Convert the input string to JSON format
        JSONObject jsonObject = new JSONObject();
        jsonObject.put("input", input);

        // Print the JSON formatted string
        System.out.println("JSON formatted string:");
        System.out.println(jsonObject.toString());

        scanner.close();
    }
}











package com.tcs.bancs.microservices.services;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.http.HttpHeaders;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.*;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.microfocus.cobol.CobolException;
import com.microfocus.cobol.RuntimeSystem;
import com.microfocus.cobol.lang.ParameterList;
import com.microfocus.cobol.lang.Pointer;
import com.tcs.bancs.microservices.*;
import com.tcs.bancs.microservices.aggregator.AggregationServiceImpl;
import com.tcs.bancs.microservices.bean.request.RequestBean;
import com.tcs.bancs.microservices.config.CacheConfig;
import com.tcs.bancs.microservices.configuration.PropertyLoader;
import com.tcs.bancs.microservices.responceout.*;
import com.tcs.bancs.microservices.util.DBProcess;
import com.tcs.bancs.microservices.util.DaoUtilities;
import com.tcs.bancs.microservices.util.FrameworkConstants;
import com.tcs.bancs.microservices.service.response.model.CbsSixEnq;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import org.springframework.util.StringUtils;
import java.util.Base64;
import java.sql.*;


import java.util.*;

import com.tcs.bancs.microservices.availablebalance.*;
import com.tcs.bancs.microservices.responceout.*;


@RestController
@Api(value = "Aggregation_API", description = " ", tags = { "Aggregation API" })
@RequestMapping("/")
@Cacheable
@CacheEvict
@Component
public class VisualCobol_Available_bal_Wrapper {
	private static boolean filterFlag = false;
	@Autowired
	AggregationServiceImpl aggregationServiceImpl;

	@Autowired
	DBProcess dbprocess;

	@Autowired
	DaoUtilities daoUtil;

	@Autowired
	HttpServletRequest HttpServletRequest;

	Logger logger = LoggerFactory.getLogger(VisualCobol_Available_bal_Wrapper.class);

	String sourceAuth = CacheConfig.frameworkConfigProperties.getProperty(FrameworkConstants.LOOKUP_FILES_PATH);
	String IP_Configuration_Path = CacheConfig.frameworkConfigProperties.getProperty(FrameworkConstants.LOOKUP_FILES_PATH);
	
	@Value("${day.datasource.jdbc-url}")
	private String dayJdbcUrl;
	
    @Value("${day.datasource.username}")
    private String dayUsername;

    @Value("${day.datasource.password}")
    private String dayPassword;

    @Value("${night.datasource.jdbc-url}")
    private String nightJdbcUrl;

    @Value("${night.datasource.username}")
    private String nightUsername;

    @Value("${night.datasource.password}")
    private String nightPassword;

    @Value("${ref.datasource.jdbc-url}")
    private String refJdbcUrl;

    @Value("${ref.datasource.username}")
    private String refUsername;

    @Value("${ref.datasource.password}")
    private String refPassword;

	Properties ipprop = PropertyLoader.readPropertyFile(new String(IP_Configuration_Path + "/IpConfigMaster.properties"));
	
	  public String ptrstring1;

	  IOMISC obj2 = new IOMISC();
	  WaCallCode input21 = new WaCallCode();
	  WaLinkConnectionString input22 = new WaLinkConnectionString();
	  WaErrorCode input23 = new WaErrorCode();
	  
	  
	  JVMBIAVBL obj9 = new JVMBIAVBL();
	  WaInputAccountNumber input1   = new WaInputAccountNumber();
	  WaInputCallCodeFlag  input2   = new WaInputCallCodeFlag();
	  WaOutputErrorFlag    outputs  = new WaOutputErrorFlag();
	  
	  RETURN obj5555 = new RETURN();
	  LwOutputAccountNumber output111 = new LwOutputAccountNumber();
	  LwOutputBalance       output222 = new LwOutputBalance();
	  LwOutputErrorNumber   output333 = new LwOutputErrorNumber();
	  LwOutputErrorDescription output444 = new LwOutputErrorDescription();
	  LwOutputFlag          output555 = new LwOutputFlag();

	@SuppressWarnings({ "unchecked", "rawtypes", "static-access" })
	@ApiOperation(value = "Call COB code", notes = "Retrieve cehck Digit:This API is used to fetch accountNum with checkdigit.", response = CbsSixEnq.class)
	@PostMapping(value = { "/AvailableBalance1" }, produces = { "application/json" })
	@CrossOrigin()  
	@JsonIgnore
	public String getCustomerDetails(@RequestBody(required = true)RequestBean reqbean,HttpServletRequest request, @RequestHeader HttpHeaders headers) 
	{

		 System.out.println("Start in Java!!!!");
		    String accountno = reqbean.getAccountNum();
			String flag      = reqbean.getFlag();
            String dbtype = "day";
	        String jdbcUrl = getJdbcUrl(dbtype);
	        String username = getUsername(dbtype);
	        String password = getPassword(dbtype);
	        
	        String connectionString = jdbcUrl.split("@")[0] + username + "/" + password + "@" + jdbcUrl.split("@")[1];
	        
	        System.out.println("JDBC URL: " + jdbcUrl);
	        System.out.println("Username: " + username);
	        System.out.println("Password: " + password);
	        System.out.println("ConnectionString:" + connectionString);

	        input21.setWaCallCode("01");
	        input22.setWaLinkConnectionString(connectionString);
	        input23.setWaErrorCode("XXXX");

	        
	        System.out.println("Java: before calling cobol..######");
	        try {

	        	obj2.IOMISC(input21, input22, input23);
	        	System.out.println("After IOMISC");
	        	
	            } 
	        catch (Exception e) { e.printStackTrace(); }
	        
	        
	      
			   System.out.println("Start in Java!!!!");
	  	       input1.setWaInputAccountNumber(accountno);
		       input2.setWaInputCallCodeFlag(flag);
	          
		       try {obj9.JVMBIAVBL(input1, input2, outputs);}
	          catch (Exception e) { e.printStackTrace(); }
	          String   errorflag = outputs.getWaOutputErrorFlag();
	          
	          if(errorflag == "Y")
	          {
	        	  System.out.println("THERE IS AN ERROR IN THE SERVICE");
	          }
	          else
	          {
	        	  String returnflag = "R";
	        	  output555.setLwOutputFlag(returnflag);
	        	  try {obj5555.RETURN(output111, output222, output333, output444, output555);}
			      catch (Exception e) { e.printStackTrace(); }
	        	 
	        	 String out_acc = output111.getLwOutputAccountNumber();
	        	 String out_bal = output222.getLwOutputBalance();
	        	 System.out.println("the acc is " + out_acc + "the bal is " + out_bal);
	        	 
	          }
		return ptrstring1;
	}
	
	   public String getJdbcUrl(String type) {
	        switch (type) {
	            case "day":
	                return dayJdbcUrl;
	            case "night":
	                return nightJdbcUrl;
	            case "ref":
	                return refJdbcUrl;
	            default:
	                throw new IllegalArgumentException("Unsupported datasource type: " + type);
	        }
	    }

	    public String getUsername(String type) {
	        switch (type) {
	            case "day":
	                return dayUsername;
	            case "night":
	                return nightUsername;
	            case "ref":
	                return refUsername;
	            default:
	                throw new IllegalArgumentException("Unsupported datasource type: " + type);
	        }
	    }

		
		  public String getPassword(String type) { 
			  switch (type) { 
			  case "day": 
				  System.out.println("INSIDE GETPASS type:" + type + dayPassword );
				  return dayPassword; 
			  case "night": 
				  return nightPassword; 
			  case "ref":
				  return refPassword;  
			  default: 
				  throw new IllegalArgumentException("Unsupported datasource type: " + type);
		 
	        }
	    } 

	  
}

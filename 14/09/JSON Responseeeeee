//    SBI Core Banking Project, Kondapur, Hyderabad, India.       *
//*****************************************************************
//                                                                *
//  	       PROGRAM - PFMOBEnquiryService.Java                 *
//                                                                *
//*****************************************************************
//                 P R O G R A M    H I S T O R Y                 *
//                                                                *
//   PROGRAMMER    :    DATE       :  SPR NO   :   COMMENTS       *
//----------------------------------------------------------------*
// Naga Sai Ganesh : 19/09/2024    : 24090001  :  MICROSERVICES   *
//----------------------------------------------------------------*

package com.tcs.bancs.microservices.services;

import java.io.IOException;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import java.util.Properties;
import java.util.concurrent.ExecutionException;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.sql.rowset.serial.SerialException;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.tcs.bancs.microservices.aggregator.AggregationServiceImpl;
import com.tcs.bancs.microservices.config.CacheConfig;
import com.tcs.bancs.microservices.configuration.PropertyLoader;
import com.tcs.bancs.microservices.exception.RrnException;
import com.tcs.bancs.microservices.exception.SrcException;
import com.tcs.bancs.microservices.impl.IGVCDetailsRepositoryImpl;
import com.tcs.bancs.microservices.util.FrameworkConstants;
import com.tcs.bancs.microservices.java.dbconnection.DBConnection;
import com.tcs.bancs.microservices.java.txtm.Error_Description;
import com.tcs.bancs.microservices.java.validate.Validate_Teller_Branch;
import com.tcs.bancs.microservices.jvm.pfenquiry.JVMUTENV;
import com.tcs.bancs.microservices.jvm.pfenquiry.JvmLsCallCode;
import com.tcs.bancs.microservices.jvm.pfenquiry.JvmLsEnvRecordArea;
import com.tcs.bancs.microservices.jvm.pfenquiry.JvmLsOptCode;
import com.tcs.bancs.microservices.reqbean.RequestBean_PFMOB;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;

@RestController
@Api(value = "Aggregation_API", description = " ", tags = { "Aggregation API" })
@RequestMapping("/")
@Cacheable
@CacheEvict
public class PFMOBEnquiryService {

	@Autowired
	AggregationServiceImpl aggregationServiceImpl;

	@Autowired
	IGVCDetailsRepositoryImpl igvcDetails;;

	@Value("${UTENVCALS-BANCS-TRACE-STATE}")
	private String bancsTraceState;

	@Value("${UTENVCALS-MASTER-DQPTYPE}")
	private String masterDQType;

	@Value("${UTENVCALS-BANCS-HOST}")
	private String bancsHost;

	@Value("${UTENVCALS-FNS-SYSNUM}")
	private String fnsSysnum;

	@Value("${UTENVCALS-CTRL-SYSNUM}")
	private String ctrlSysnum;

	@Value("${UTENVCALS-DAY-SYSNUM}")
	private String daySysnum;

	@Value("${UTENVCALS-NIGHT-SYSNUM}")
	private String nightSysnum;

	@Value("${UTENVCALS-NON24H-SYSNUM}")
	private String non24hsum;

	@Value("${UTENVCALS-DEF-RMODE}")
	private String defRMode;

	@Value("${UTENVCALS-MASTER-DB-1}")
	private String masterDB1;

	@Value("${UTENVCALS-MASTER-DB-2}")
	private String masterDB2;

	@Value("${UTENVCALS-SERVICES-FLAG}")
	private String servicesFlag;

	@Value("${VC-MS-SERVICE-ID}")
	private String serviceid;

	Logger logger = LoggerFactory.getLogger(PFMOBEnquiryService.class);
	String ErrorCodeMasterFilePath = CacheConfig.frameworkConfigProperties
			.getProperty(FrameworkConstants.LOOKUP_FILES_PATH);
	Properties error = PropertyLoader
			.readPropertyFile(new String(ErrorCodeMasterFilePath + "\\ErrorCodeMaster.properties"));

	private final DBConnection dbconnection;
	private final Response responseObj;

	@Autowired
	public PFMOBEnquiryService(DBConnection dbconnection, Response responseObj) {
		this.dbconnection = dbconnection;
		this.responseObj = responseObj;
	}

	ErrorResponse errobj = new ErrorResponse();
	Error_Description errdesc = new Error_Description();
	Validate_Teller_Branch validate = new Validate_Teller_Branch();

	JVMUTENV jvmutenv = new JVMUTENV();
	JvmLsCallCode callCode = new JvmLsCallCode();
	JvmLsOptCode optcode = new JvmLsOptCode();
	JvmLsEnvRecordArea commonarea = new JvmLsEnvRecordArea();

	PFEnquiryService_Child pfchild = new PFEnquiryService_Child();
	MOBEnquiryService_Child mobchild = new MOBEnquiryService_Child();

	InputValidations inpval = new InputValidations();

	@SuppressWarnings({ "unchecked", "rawtypes"})
	@ApiOperation(value = "Call PFMOB", notes = "PFMOB Service:This API is used to fetch Customer Details.")
	@PostMapping(value = { "/PFMOBEnq" }, produces = { "application/json" })
	@CrossOrigin()
	@JsonIgnoreProperties(ignoreUnknown = true)
	public ResponseEntity<String> getCustomerDetails(@RequestBody(required = false) RequestBean_PFMOB reqbean,
			HttpServletRequest request, @RequestHeader HttpHeaders headers, HttpServletResponse response)
			throws SerialException, SQLException, IOException, RrnException, SrcException, InterruptedException, ExecutionException {
		response.setHeader("X-Content-Type-Options", "nosniff");
		response.setHeader("X-Frame-Options", "DENY");
		response.setHeader("Content-Security-Policy", "default-src 'self'");
		response.setHeader("X-XSS-Protection", "1;mode=block");

		String IPAddress = request.getHeader("X-Forwarded-For");
		String remoteAddress = request.getRemoteAddr();
		String accept = request.getHeader("Content-Type");
		DateTimeFormatter entryDate1 = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss:SSS");
		LocalDateTime time = LocalDateTime.now();
		String entryDate = entryDate1.format(time);

		String finalResponse;

		String refno = new String();
		String tellerno = new String();
		String branchno = new String();
		String inp_opt = new String();
		String pfno = new String();
		String noOfRecords = new String();
		//int requestedNumberOfRecords;
		String cifno = new String();
		String mobno = new String();
		String serviceno = serviceid;
		String validChkdFlag = new String();
		List<String> chkdRes = new ArrayList<>();
		String out_response = "";
		String errno = "";
		String errDesc = "";
		String allowTellerBranchFlag = "";
		String callcode = "S";
		String opt = "";
		List<String> res = new ArrayList<String>();
		String formattedmasterDB1 = StringUtils.rightPad(masterDB1, 15);
		String formattedmasterDB2 = StringUtils.rightPad(masterDB2, 15);
		String lsRecArea = bancsTraceState.trim() + masterDQType.trim() + bancsHost.trim() + fnsSysnum.trim()
				+ ctrlSysnum.trim() + daySysnum.trim() + nightSysnum.trim() + non24hsum.trim() + defRMode.trim()
				+ formattedmasterDB1 + formattedmasterDB2 + servicesFlag.trim();
		String[] arr = { bancsTraceState, masterDQType, bancsHost, fnsSysnum, ctrlSysnum, daySysnum, nightSysnum,
				non24hsum, defRMode, masterDB1, masterDB2, servicesFlag };

		errno = inpval.isNullorEmpty(arr);
		if (!errno.equals("00000")) {

			errDesc = error.getProperty(errno);
			finalResponse = errobj.getErrorResponse(errno, errDesc, refno, tellerno, branchno);
			igvcDetails.saveInitialRequest(Base64.getEncoder().encodeToString((reqbean.toString()).getBytes()),
					remoteAddress, tellerno, refno, serviceno, entryDate, IPAddress, errno, errDesc);
			return new ResponseEntity(finalResponse, HttpStatus.OK);
		}

		if (reqbean != null) {

			refno = reqbean.getReferenceNumber();
			errno = inpval.validateRefNum(refno);
			if (!errno.equals("00000")) {

				errDesc = error.getProperty(errno);
				finalResponse = errobj.getErrorResponse(errno, errDesc, "", "", "");
				igvcDetails.saveInitialRequest(Base64.getEncoder().encodeToString((reqbean.toString()).getBytes()),
						remoteAddress, tellerno, refno, serviceno, entryDate, IPAddress, errno, errDesc);
				return new ResponseEntity(finalResponse, HttpStatus.OK);
			}

			tellerno = request.getHeader("Teller_Number");
			errno = inpval.validateTellerNum(tellerno);

			if (!errno.equals("00000")) {

				errDesc = error.getProperty(errno);
				finalResponse = errobj.getErrorResponse(errno, errDesc, refno, "", "");
				igvcDetails.saveInitialRequest(Base64.getEncoder().encodeToString((reqbean.toString()).getBytes()),
						remoteAddress, tellerno, refno, serviceno, entryDate, IPAddress, errno, errDesc);
				return new ResponseEntity(finalResponse, HttpStatus.OK);
			}

			branchno = request.getHeader("Branch_Number");
			errno = inpval.validateBranchNum(branchno);

			if (!errno.equals("00000")) {

				errDesc = error.getProperty(errno);
				finalResponse = errobj.getErrorResponse(errno, errDesc, refno, tellerno, "");
				igvcDetails.saveInitialRequest(Base64.getEncoder().encodeToString((reqbean.toString()).getBytes()),
						remoteAddress, tellerno, refno, serviceno, entryDate, IPAddress, errno, errDesc);
				return new ResponseEntity(finalResponse, HttpStatus.OK);
			}

			inp_opt = reqbean.getOption();
			errno = inpval.validateOptionCode(inp_opt);

			if (!errno.equals("00000")) {

				errDesc = error.getProperty(errno);
				finalResponse = errobj.getErrorResponse(errno, errDesc, refno, tellerno, branchno);
				igvcDetails.saveInitialRequest(Base64.getEncoder().encodeToString((reqbean.toString()).getBytes()),
						remoteAddress, tellerno, refno, serviceno, entryDate, IPAddress, errno, errDesc);
				return new ResponseEntity(finalResponse, HttpStatus.OK);
			}

			if (inp_opt.equals("01")) {

				pfno = reqbean.getPFNumber();
				errno = inpval.validatePFNum(pfno);

				if (!errno.equals("00000")) {

					errDesc = error.getProperty(errno);
					finalResponse = errobj.getErrorResponse(errno, errDesc, refno, tellerno, branchno);
					igvcDetails.saveInitialRequest(Base64.getEncoder().encodeToString((reqbean.toString()).getBytes()),
							remoteAddress, tellerno, refno, serviceno, entryDate, IPAddress, errno, errDesc);
					return new ResponseEntity(finalResponse, HttpStatus.OK);
				}
			} else if (inp_opt.equals("02")) {
				mobno = reqbean.getMobileNumber();
				errno = inpval.validateMobileNum(mobno);
				if (!errno.equals("00000")) {
					errDesc = error.getProperty(errno);
					finalResponse = errobj.getErrorResponse(errno, errDesc, refno, tellerno, branchno);
					igvcDetails.saveInitialRequest(Base64.getEncoder().encodeToString((reqbean.toString()).getBytes()),
							remoteAddress, tellerno, refno, serviceno, entryDate, IPAddress, errno, errDesc);
					return new ResponseEntity(finalResponse, HttpStatus.OK);
				}
			} else {
				errno = "VC005";
				errDesc = error.getProperty(errno);
				finalResponse = errobj.getErrorResponse(errno, errDesc, refno, tellerno, branchno);
				igvcDetails.saveInitialRequest(Base64.getEncoder().encodeToString((reqbean.toString()).getBytes()),
						remoteAddress, tellerno, refno, serviceno, entryDate, IPAddress, errno, errDesc);
				return new ResponseEntity(finalResponse, HttpStatus.OK);
			}

			cifno = reqbean.getCIF_Number();
			chkdRes = inpval.validateCIFNumber(cifno);

			if (!chkdRes.get(1).equals("00000")) {
				if (chkdRes.get(1).equals("VC011")) {
					errDesc = error.getProperty(chkdRes.get(1));
					finalResponse = errobj.getErrorResponse(chkdRes.get(1), errDesc, refno, tellerno, branchno);
					igvcDetails.saveInitialRequest(Base64.getEncoder().encodeToString((reqbean.toString()).getBytes()),
							remoteAddress, tellerno, refno, serviceno, entryDate, IPAddress, errno, errDesc);
					return new ResponseEntity(finalResponse, HttpStatus.OK);
				} else {
					validChkdFlag = "N";
				}
			} else {
				cifno = chkdRes.get(0);
				validChkdFlag = "Y";
			}
			logger.info("VC------------------------Fetching Record_Count------------------------VC" + reqbean.getRecordCount());
			
		    int requestedNoOfRecords = reqbean.getRecordCount();
		    
		    if (requestedNoOfRecords > 999) {
		         errno = "VC011"; // You can define a specific error code for invalid record count
		         errDesc = error.getProperty(errno);
		         finalResponse = errobj.getErrorResponse(errno, errDesc, refno, tellerno, branchno);
		        igvcDetails.saveInitialRequest(Base64.getEncoder().encodeToString((reqbean.toString()).getBytes()),
		                        remoteAddress, tellerno, refno, serviceno, entryDate, IPAddress, errno, errDesc);
		        return new ResponseEntity<>(finalResponse, HttpStatus.OK);
		    }

			callCode.setJvmLsCallCode(callcode);
			commonarea.setJvmLsEnvRecordArea(lsRecArea);
			jvmutenv.JVMUTENV(callCode, optcode, commonarea);

			igvcDetails.saveInitialRequest(Base64.getEncoder().encodeToString((reqbean.toString()).getBytes()),
					remoteAddress, tellerno, refno, serviceno, entryDate, IPAddress, errno, errDesc);

			if (accept != null && accept.contains("application/json")) {
				logger.info("VC------------------------Initiating DB Connection------------------------VC");

				String dbConnection_flag = dbconnection.getCBSDBConnection("01", callcode, inp_opt, lsRecArea);
				if (dbConnection_flag.equals("Y")) {

					logger.info(
							"VC------------------------DB Connection Fetched Sucessfully------------------------VC");
					if (validChkdFlag.equals("Y")) {
						logger.info(
								"VC------------------------Intiating Teller&Branch Validation------------------------VC");

						List<String> TellerBranchRes = validate.validateTellerBranchService(tellerno, branchno,
								serviceno, callcode, inp_opt, lsRecArea);
						allowTellerBranchFlag = TellerBranchRes.get(0);
						errno = TellerBranchRes.get(1);
						if (allowTellerBranchFlag.equals("Y")) {

							logger.info(
									"VC------------------------Teller&Branch Validated Sucessfully------------------------VC");

							if (inp_opt.equals("01")) {

								logger.info(
										"VC------------------------Validating PF Option_Code------------------------VC");

								res = pfchild.callPFEnquiryChild(pfno, cifno, requestedNoOfRecords);
								out_response = res.get(0);
								logger.info(
										"Response in Service---------------------------" + out_response.length());
								noOfRecords = res.get(1);
								logger.info(
										"Records in Service---------------------------" + noOfRecords);
								errno = res.get(2);
								logger.info(
										"Errors in Service---------------------------" + errno);
							} else if (inp_opt.equals("02")) {

								logger.info(
										"VC------------------------Validating Mobile Option_Code------------------------VC");

								res = mobchild.callMOBEnquiryChild(mobno, cifno);
								out_response = res.get(0);
								errno = res.get(2);
							}
						}
					} else {
						errDesc = errdesc.getCbsErrDesc(chkdRes.get(1), callcode, opt, lsRecArea);
						finalResponse = errobj.getErrorResponse(chkdRes.get(1), errDesc, refno, tellerno, branchno);
						igvcDetails.saveInitialRequest(
								Base64.getEncoder().encodeToString((reqbean.toString()).getBytes()), remoteAddress,
								tellerno, refno, serviceno, entryDate, IPAddress, chkdRes.get(1), errDesc);
						return new ResponseEntity(finalResponse, HttpStatus.OK);
					}
				} else {
					errno = "VC010";
					errDesc = error.getProperty(errno);
					finalResponse = errobj.getErrorResponse(errno, errDesc, refno, tellerno, branchno);
					igvcDetails.saveInitialRequest(Base64.getEncoder().encodeToString((reqbean.toString()).getBytes()),
							remoteAddress, tellerno, refno, serviceno, entryDate, IPAddress, errno, errDesc);
					return new ResponseEntity(finalResponse, HttpStatus.OK);
				}
			}

			else {
				errno = "VC009";
				errDesc = error.getProperty(errno);
				finalResponse = errobj.getErrorResponse(errno, errDesc, refno, tellerno, branchno);
				igvcDetails.saveInitialRequest(Base64.getEncoder().encodeToString((reqbean.toString()).getBytes()),
						remoteAddress, tellerno, refno, serviceno, entryDate, IPAddress, errno, errDesc);
				return new ResponseEntity(finalResponse, HttpStatus.OK);
			}
		} else {
			errno = "VC001";
			errDesc = error.getProperty(errno);
			finalResponse = errobj.getErrorResponse(errno, errDesc, refno, tellerno, branchno);
			igvcDetails.saveInitialRequest("", remoteAddress, tellerno, refno, serviceno, entryDate, IPAddress, errno,
					errDesc);
			return new ResponseEntity(finalResponse, HttpStatus.OK);

		}

		if (errno.equals("0000")) {
			finalResponse = responseObj.getResponse(out_response, refno, tellerno, branchno);
			igvcDetails.updateResponse("Y", errno, "Ok! Success",
					Base64.getEncoder().encodeToString((finalResponse).getBytes()), refno, entryDate);
		} else {
			errDesc = errdesc.getCbsErrDesc(errno, callcode, opt, lsRecArea);
			finalResponse = errobj.getErrorResponse(errno, errDesc, refno, tellerno, branchno);
			igvcDetails.updateResponse("N", errno, errDesc,
					Base64.getEncoder().encodeToString((finalResponse).getBytes()), refno, entryDate);
		}

		return new ResponseEntity(finalResponse, HttpStatus.OK);

	}
}


---------------------------------------------------------------------------------------------------------------------------

//    SBI Core Banking Project, Hyderabad, India.       *
//*****************************************************************
//                                                                *
//  	           PROGRAM - Response.Java                *
//                                                                *
//*****************************************************************
//                 P R O G R A M    H I S T O R Y                 *
//                                                                *
//   PROGRAMMER    :    DATE       :  SPR NO   :   COMMENTS       *
//----------------------------------------------------------------*
// Niharika Tammana: 16/09/2024    : 24090001  :  MICROSERVICES   *
//----------------------------------------------------------------*
package com.tcs.bancs.microservices.services;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.bind.annotation.*;

import com.fasterxml.jackson.annotation.JsonIgnore;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.LinkedHashMap;
import java.util.Map;

@Component
public class Response {

	@Value("${response.outline.location}")
	private String RES_FILE_PATH;
	
    Logger 					logger 	= LoggerFactory.getLogger(Response.class);
	FormatResponse 			frobj 	= new FormatResponse();
	SplitandStoreResponse 	ssobj 	= new SplitandStoreResponse();

    @CrossOrigin()  
    @JsonIgnore
    public String getResponse(String linkoutRes, String refno, String tellerno, String branchno) {
        
    	logger.info("Fetching Response...");
    	Map<String, String> paramLengthMap = new LinkedHashMap<>();
        String errno = "0000";
        String errdesc = "Ok! Success";
        String json = "";
        try {
            Files.lines(Paths.get(RES_FILE_PATH)).forEach(line -> {
                String[] lineSplit = line.split(":");
                paramLengthMap.put(lineSplit[0], lineSplit[1]);
            });
        } catch (IOException e) {
            logger.error("Error occured while fetching the response outline");
        }
        
        Map<String, Object> result = new LinkedHashMap<>();
        result.put("Reference Number", refno);
        result.put("Teller Number", tellerno);
        result.put("Branch Number", branchno);
        result.put("Error Number", errno);
        result.put("Error Description", errdesc);
        Map<String, Object> cobResponse = ssobj.splitAndStoreResponse(linkoutRes, paramLengthMap);
        result.putAll(cobResponse);
        json = frobj.convertMapToJson(result);
        logger.info("Fetched Response");
        
        return json;
    }
}


-----------------------------------------------------------------------------------------------


//    SBI Core Banking Project, Hyderabad, India.       *
//*****************************************************************
//                                                                *
//  	           PROGRAM - SplitandStoreResponse.Java                *
//                                                                *
//*****************************************************************
//                 P R O G R A M    H I S T O R Y                 *
//                                                                *
//   PROGRAMMER    :    DATE       :  SPR NO   :   COMMENTS       *
//----------------------------------------------------------------*
// Niharika Tammana: 16/09/2024    : 24090001  :  MICROSERVICES   *
//----------------------------------------------------------------*
package com.tcs.bancs.microservices.services;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

public class SplitandStoreResponse {

	ProcessSubStructure	pssobj	= new ProcessSubStructure();
	
    public Map<String, Object> splitAndStoreResponse(String str, Map<String, String> paramLengthMap) {
        Map<String, Object> splitResponse = new LinkedHashMap<>();
        int curIndex = 0;

        for (Map.Entry<String, String> entry : paramLengthMap.entrySet()) {
            String key = entry.getKey();
            String lengthAndRepetition = entry.getValue();
            String[] lengthAndRepSplit = lengthAndRepetition.split("\\*");
            int length = Integer.parseInt(lengthAndRepSplit[0]);
            int repetitions = lengthAndRepSplit.length > 1 ? Integer.parseInt(lengthAndRepSplit[1]) : 1;

            if (repetitions > 1) {
                List<Map<String, Object>> repeatedItems = new ArrayList<>();
                for (int i = 0; i < repetitions; i++) {
                	if(str.substring(curIndex, curIndex + length).trim().equals("")) {
                		splitResponse.put(key, repeatedItems);
                		return splitResponse;
                	}
                    if (curIndex + length <= str.length()) {
                        Map<String, Object> item = new LinkedHashMap<>();
                        pssobj.processSubStructure(str.substring(curIndex, curIndex + length), item, key, paramLengthMap);
                        repeatedItems.add(item);
                        curIndex += length;
                    } else {
                        break; // In case remaining length is less than expected
                    }
                }
                splitResponse.put(key, repeatedItems);
            } else {
                if (curIndex + length <= str.length()) {
                	pssobj.processSubStructure(str.substring(curIndex, curIndex + length), splitResponse, key, paramLengthMap);
                    curIndex += length;
                } else {
                    break; // In case remaining length is less than expected
                }
            }
        }

        return splitResponse;
    }
    
}
----------------------------------------------

package com.tcs.bancs.hyderabad.putty;

import javax.swing.*;
import java.awt.*;
import java.io.*;
import java.util.HashMap;

public class PuttyConnector {

    private static JLabel statusLabel;
    private static HashMap<String, String> regionPasswords = new HashMap<>(); // Store region-password pairs

    public static void main(String[] args) {
        // Load passwords from the text file at the start
        loadPasswordsFromFile("passwords.txt");

        // Create the main frame
        JFrame frame = new JFrame("PuTTY Connector Hyderabad Dev");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(800, 500);
        frame.setLayout(new BorderLayout(10, 10)); // Adds padding between components

        // Header panel for the title
        JPanel headerPanel = new JPanel();
        headerPanel.setLayout(new FlowLayout(FlowLayout.CENTER));
        JLabel headerLabel = new JLabel("PuTTY Connector - Select your Dev Region");
        headerLabel.setFont(new Font("Century Gothic Bold", Font.BOLD, 24));
        headerPanel.add(headerLabel);
        frame.add(headerPanel, BorderLayout.NORTH);

        // Center panel to hold the buttons
        JPanel buttonPanel = new JPanel();
        buttonPanel.setLayout(new GridLayout(3, 3, 15, 15)); // 3x3 grid with padding

        // Create buttons for regions
        String[] regions = {"CIF", "Deposits", "Loans", "GL", "NDVP", "Interface"};

        for (String region : regions) {
            JButton button = new JButton(region);
            button.setFont(new Font("Century Gothic Bold", Font.BOLD, 16));
            button.setToolTipText("Connect to " + region);
            button.addActionListener(e -> connectToPutty(region));
            buttonPanel.add(button);
        }
        frame.add(buttonPanel, BorderLayout.CENTER);

        // Footer panel for additional information or status
        JPanel footerPanel = new JPanel();
        footerPanel.setLayout(new BorderLayout());

        statusLabel = new JLabel("Ready");
        footerPanel.add(statusLabel, BorderLayout.WEST);

        JLabel footerLabel = new JLabel("PuTTY Connector - Designed by Hyderabad Team");
        footerPanel.add(footerLabel, BorderLayout.EAST);
        frame.add(footerPanel, BorderLayout.SOUTH);

        // Show the frame
        frame.setVisible(true);
    }

    // Method to connect to PuTTY
    public static void connectToPutty(String region) {
        try {
            statusLabel.setText("Connecting to " + region + "...");

            String puttyPath = new File("putty.exe").getAbsolutePath(); // Full path to putty.exe
            File puttyFile = new File(puttyPath);
            if (!puttyFile.exists()) {
                System.out.println("Putty.exe not found in the directory: " + puttyFile.getAbsolutePath());
                JOptionPane.showMessageDialog(null, "PuTTY executable not found!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Get the password for the selected region
            String password = regionPasswords.get(region);
            if (password == null) {
                JOptionPane.showMessageDialog(null, "No password found for " + region, "Error", JOptionPane.ERROR_MESSAGE);
                statusLabel.setText("Error: No password found for " + region);
                return;
            }

            // Command for PuTTY
            String[] command = null;
            switch (region) {
                case "CIF":
                    command = new String[]{puttyPath, "-ssh", "fnsonld1@10.176.15.51", "-P", "2321", "-pw", password};
                    break;
                case "Deposits":
                    command = new String[]{puttyPath, "-ssh", "fnsonld2@10.176.15.51", "-P", "2321", "-pw", password};
                    break;
                case "Loans":
                    command = new String[]{puttyPath, "-ssh", "fnsonld3@10.176.15.51", "-P", "2321", "-pw", password};
                    break;
                case "GL":
                    command = new String[]{puttyPath, "-ssh", "fnsonld4@10.176.15.51", "-P", "2321", "-pw", password};
                    break;
                case "NDVP":
                    command = new String[]{puttyPath, "-ssh", "fnsonld8@10.176.15.51", "-P", "2321", "-pw", password};
                    break;
                case "Interface":
                    command = new String[]{puttyPath, "-ssh", "fnsonld9@10.176.15.51", "-P", "2321", "-pw", password};
                    break;
                default:
                    JOptionPane.showMessageDialog(null, "Region not configured: " + region, "Error", JOptionPane.ERROR_MESSAGE);
                    statusLabel.setText("Error: Region not configured");
                    return;
            }

            // Print the command for debugging purposes
            System.out.println("Running Command: " + String.join(" ", command));

            // Use ProcessBuilder to run PuTTY with the command arguments
            ProcessBuilder processBuilder = new ProcessBuilder(command);
            processBuilder.directory(new File(".")); // Set current directory for execution
            processBuilder.start(); // Execute the process
            statusLabel.setText("Connected to " + region);

        } catch (IOException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error connecting to " + region + ": " + ex.getMessage(),
                    "Connection Error", JOptionPane.ERROR_MESSAGE);
            statusLabel.setText("Failed to connect to " + region);
        }
    }

    // Method to load passwords from the text file
    public static void loadPasswordsFromFile(String filePath) {
        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] parts = line.split("=");
                if (parts.length == 2) {
                    String region = parts[0].trim();
                    String password = parts[1].trim();
                    regionPasswords.put(region, password); // Store the region-password pair
                }
            }
            System.out.println("Passwords loaded successfully.");
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error loading passwords: " + e.getMessage(),
                    "File Error", JOptionPane.ERROR_MESSAGE);
        }
    }
}



CIF=Team@2024
Deposits=Sep@2024
Loans=Jul@2024
GL=Jun@2024
NDVP=Radhe@2024
Interface=Sep@2024





import javax.swing.*;
import java.awt.*;
import java.io.*;
import java.net.URISyntaxException;
import java.util.HashMap;
import java.util.Map;

public class PuttyConnector {

    private static JLabel statusLabel;
    private static Map<String, String> regionPasswords = new HashMap<>();

    public static void main(String[] args) {
        // Load passwords from passwords.txt file
        try {
            String jarDir = new File(PuttyConnector.class.getProtectionDomain().getCodeSource().getLocation().toURI()).getParent();
            String filePath = jarDir + File.separator + "passwords.txt";
            System.out.println("Looking for passwords.txt at: " + filePath);
            loadPasswordsFromFile(filePath);
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error loading passwords: " + e.getMessage(), "File Error", JOptionPane.ERROR_MESSAGE);
        }

        // UI setup code continues...
    }

    public static void loadPasswordsFromFile(String filePath) {
        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] parts = line.split("=");
                if (parts.length == 2) {
                    String region = parts[0].trim();
                    String password = parts[1].trim();
                    regionPasswords.put(region, password);
                }
            }
            System.out.println("Passwords loaded successfully.");
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error loading passwords: " + e.getMessage(), "File Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    // Further code for UI and connection logic...
}











11111111111111



import javax.swing.*;
import java.awt.*;
import java.io.*;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class PuttyConnector {

    private static JLabel statusLabel;
    private static Map<String, String> passwords = new HashMap<>();

    public static void main(String[] args) {
        // Load passwords from resource file within JAR
        loadPasswords();

        // Create the main frame
        JFrame frame = new JFrame("PuTTY Connector Hyderabad Dev");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(800, 500);
        frame.setLayout(new BorderLayout(10, 10)); // Adds padding between components

        // Header panel for the title
        JPanel headerPanel = new JPanel();
        headerPanel.setLayout(new FlowLayout(FlowLayout.CENTER));
        JLabel headerLabel = new JLabel("PuTTY Connector - Select your Dev Region");
        headerLabel.setFont(new Font("Century Gothic Bold", Font.BOLD, 24));
        headerPanel.add(headerLabel);
        frame.add(headerPanel, BorderLayout.NORTH);

        // Center panel to hold the buttons
        JPanel buttonPanel = new JPanel();
        buttonPanel.setLayout(new GridLayout(3, 3, 15, 15)); // 3x3 grid with padding

        // Create buttons for regions
        String[] regions = {"CIF", "Deposits", "Loans", "GL", "NDVP", "Interface"};

        for (String region : regions) {
            JButton button = new JButton(region);
            button.setFont(new Font("Century Gothic Bold", Font.BOLD, 16));
            button.setToolTipText("Connect to " + region);
            button.addActionListener(e -> connectToPutty(region));
            buttonPanel.add(button);
        }

        frame.add(buttonPanel, BorderLayout.CENTER);

        // Footer panel for additional information or status
        JPanel footerPanel = new JPanel();
        footerPanel.setLayout(new BorderLayout());

        statusLabel = new JLabel("Ready");
        footerPanel.add(statusLabel, BorderLayout.WEST);

        JLabel footerLabel = new JLabel("PuTTY Connector - Designed by Hyderabad Team");
        footerPanel.add(footerLabel, BorderLayout.EAST);
        frame.add(footerPanel, BorderLayout.SOUTH);

        // Show the frame
        frame.setVisible(true);
    }

    // Load passwords from resource file inside JAR
    private static void loadPasswords() {
        try (InputStream inputStream = PuttyConnector.class.getResourceAsStream("/passwords.txt")) {
            if (inputStream == null) {
                System.err.println("Passwords file not found!");
                return;
            }
            try (Scanner scanner = new Scanner(inputStream)) {
                while (scanner.hasNextLine()) {
                    String line = scanner.nextLine();
                    String[] parts = line.split(":");
                    if (parts.length == 2) {
                        passwords.put(parts[0], parts[1]); // region:password mapping
                    }
                }
            }
        } catch (IOException e) {
            System.err.println("Error reading passwords file: " + e.getMessage());
        }
    }

    // Method to connect to PuTTY
    public static void connectToPutty(String region) {
        try {
            statusLabel.setText("Connecting to " + region + "...");
            String puttyPath = new File("putty.exe").getAbsolutePath(); // Full path to putty.exe
            File puttyFile = new File("putty.exe");
            if (!puttyFile.exists()) {
                System.out.println("Putty.exe not found in the directory: " + puttyFile.getAbsolutePath());
                return;
            }

            String password = passwords.get(region);
            if (password == null) {
                JOptionPane.showMessageDialog(null, "Password not found for region: " + region,
                        "Error", JOptionPane.ERROR_MESSAGE);
                statusLabel.setText("Error: Password not found for region");
                return;
            }

            String[] command = null;
            switch (region) {
                case "CIF":
                    command = new String[]{puttyPath, "-ssh", "fnsonld1@10.176.15.51", "-P", "2321", "-pw", password};
                    break;
                case "Deposits":
                    command = new String[]{puttyPath, "-ssh", "fnsonld2@10.176.15.51", "-P", "2321", "-pw", password};
                    break;
                case "Loans":
                    command = new String[]{puttyPath, "-ssh", "fnsonld3@10.176.15.51", "-P", "2321", "-pw", password};
                    break;
                case "GL":
                    command = new String[]{puttyPath, "-ssh", "fnsonld4@10.176.15.51", "-P", "2321", "-pw", password};
                    break;
                case "NDVP":
                    command = new String[]{puttyPath, "-ssh", "fnsonld8@10.176.15.51", "-P", "2321", "-pw", password};
                    break;
                case "Interface":
                    command = new String[]{puttyPath, "-ssh", "fnsonld9@10.176.15.51", "-P", "2321", "-pw", password};
                    break;
                default:
                    JOptionPane.showMessageDialog(null, "Region not configured: " + region,
                            "Error", JOptionPane.ERROR_MESSAGE);
                    statusLabel.setText("Error: Region not configured");
                    return;
            }

            System.out.println("Running Command: " + String.join(" ", command));

            ProcessBuilder processBuilder = new ProcessBuilder(command);
            processBuilder.directory(new File(".")); // Set current directory for execution
            processBuilder.start(); // Execute the process
            statusLabel.setText("Connected to " + region);
        } catch (IOException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error connecting to " + region + ": " + ex.getMessage(),
                    "Connection Error", JOptionPane.ERROR_MESSAGE);
            statusLabel.setText("Failed to connect to " + region);
        }
    }
}
package com.tcs.bancs.microservices.impl;

import java.io.IOException;
import java.sql.Clob;
import java.sql.Date;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Base64;

import javax.sql.rowset.serial.SerialException;
import javax.transaction.Transactional;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.OptimisticLockingFailureException;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.repository.query.Param;
import org.springframework.orm.jpa.JpaOptimisticLockingFailureException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.interceptor.TransactionAspectSupport;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

//import com.tcs.bancs.microservices.RequestBean_CbsSix;
import com.tcs.bancs.microservices.db.model.Migenq_t1;
import com.tcs.bancs.microservices.db.model.Migenq_t2;
import com.tcs.bancs.microservices.db.model.Migenq_t3;
import com.tcs.bancs.microservices.db.model.Migenqpk_t1;
//import com.tcs.bancs.microservices.db.model.Migenqpk_t2;
import com.tcs.bancs.microservices.db.model.Migenqpk_t3;
import com.tcs.bancs.microservices.exception.RrnException;
import com.tcs.bancs.microservices.exception.SrcException;
import com.tcs.bancs.microservices.impl.RetryUtils;

import com.tcs.bancs.microservices.repository.day.Migenq_t1DetailDayRepo;
import com.tcs.bancs.microservices.repository.ref.Migenq_t1DetailRefRepo;
import com.tcs.bancs.microservices.repository.ref.Migenq_t2DetailRefRepo;
//import com.tcs.bancs.microservices.repository.ref.Migenq_t2UpdateRefRepo;
//import com.tcs.log.utils.ClobToStringConverter;
//import com.tcs.log.utils.encryptLog;
import com.tcs.bancs.microservices.repository.ref.Migenq_t3DetailRefRepo;

@Service
public class MigenqDetailsRepositoryImpl {
	
	 
	private final Migenq_t1DetailRefRepo dayRepo1;
	private final Migenq_t2DetailRefRepo dayRepo2;
	private final Migenq_t3DetailRefRepo dayRepo3;

	public MigenqDetailsRepositoryImpl(Migenq_t1DetailRefRepo dayRepo1, Migenq_t2DetailRefRepo dayRepo2,
			Migenq_t3DetailRefRepo dayRepo3) {
		super();
		this.dayRepo1 = dayRepo1;
		this.dayRepo2 = dayRepo2;
		this.dayRepo3 = dayRepo3;
	}
    @PersistenceContext
    private EntityManager entityManager;

    private static final int MAX_RETRIES = 3;

	   @Transactional
	//   public boolean processRequest(String RESPONSE_STATUS,String REQ_STR,String RESP_STR, String CLIENT_IP, String TELLER_ID, String ERROR_CODE, String ERROR_DESCRIPTION,String PK_REQ_REF_NO, String SRC_ID,String RESPONSE_STRING,String RECD_TIME,String IP_ADDRESS) throws SerialException, SQLException, IOException, RrnException, SrcException {
//		   saveInitialRequest(REQ_STR, CLIENT_IP, TELLER_ID, PK_REQ_REF_NO, SRC_ID, RECD_TIME, IP_ADDRESS);
//		   updateResponse(PK_REQ_REF_NO, SRC_ID, RESPONSE_STATUS, RESPONSE_STRING, ERROR_CODE, ERROR_DESCRIPTION, RECD_TIME);
//		   return true;
	//   }
	////    
	 //   @Transactional

	    public boolean saveInitialRequest(String REQ_STR, String CLIENT_IP, String TELLER_ID, String PK_REQ_REF_NO, String SRC_ID, String RECD_TIME, String IP_ADDRESS) throws SerialException, SQLException, IOException, RrnException, SrcException {

	        DateTimeFormatter entryDate = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss:SSS");
	        DateTimeFormatter entryDate1 = DateTimeFormatter.ofPattern("yyyy-MM-dd");
	        LocalDateTime time = LocalDateTime.now();
	        LocalDate date = LocalDate.now();
	        int dayCount = date.getDayOfMonth();
	        int Logsaver = dayCount % 3;

	        if (PK_REQ_REF_NO == null || PK_REQ_REF_NO.length() >= 26 || PK_REQ_REF_NO.isEmpty()) {
	            PK_REQ_REF_NO = " ";
	        }
	        if (SRC_ID == null || SRC_ID.length() > 6 || SRC_ID.isEmpty()) {
	            SRC_ID = " ";
	        }

	        if (PK_REQ_REF_NO == null) {
	            throw new RrnException();
	        } else if (SRC_ID == null) {
	            throw new SrcException();
	        }
	try {
	        if (Logsaver == 1) {
	            Migenq_t1 mig = new Migenq_t1();
	            Migenqpk_t1 pk = new Migenqpk_t1();

	            pk.setPK_REQ_REF_NO(PK_REQ_REF_NO);
	            mig.setSRC_ID(SRC_ID);
	            if (IP_ADDRESS == null || IP_ADDRESS.isEmpty() || IP_ADDRESS.length() > 20) {
	                mig.setCLIENT_IP(" ");
	            } else {
	                mig.setCLIENT_IP(IP_ADDRESS);
	            }
	            if (TELLER_ID == null || TELLER_ID.isEmpty() || TELLER_ID.length() < 1 || TELLER_ID.matches(" ")) {
	                mig.setTELLER_ID(" ");
	            } else if (TELLER_ID.length() > 10) {
	                mig.setTELLER_ID(TELLER_ID.substring(TELLER_ID.length() - 10, TELLER_ID.length()));
	            } else {
	                mig.setTELLER_ID(TELLER_ID);
	            }

	            mig.setENTRY_DATE(entryDate1.format(time));
	            mig.setTXN_NO("070805");
	            mig.setTXN_NAME("accountChannelEnq");
	            mig.setREQ_STR(REQ_STR);
				mig.setRESPONSE_STATUS(" ");
				mig.setERROR_CODE(" ");
				mig.setERROR_DESCRIPTION(" ");
				mig.setREQ_STR(REQ_STR);
				mig.setRESP_STR(" ");
	            mig.setRECD_TIME(RECD_TIME);
	            mig.setRESP_TIME(entryDate.format(time));
				Clob clob=new javax.sql.rowset.serial.SerialClob(" ".toCharArray());
		        mig.setRESPONSE_STRING(clob);
	            mig.setMigpk(pk);
	            Integer version = mig.getVersion(); 
	            System.out.println("Intial Version:----------------------------------------"+ version);
	            System.out.println("Intial Version:"+ mig.getVersion());
	            
	            dayRepo1.save(mig);
	            dayRepo1.flush();
	            System.out.println("Saved Version:" + mig.getVersion());
//	            mig.setVersion();
	            //mig.setERROR_CODE("155");
//	            dayRepo1.save(mig);
//	            System.out.println("Version After update ka update$$$$$$$$$$" + mig.getVersion());
	        } else if (Logsaver == 2) {
	            Migenq_t2 mig2 = new Migenq_t2();
//	            Migenqpk_t2 pk2 = new Migenqpk_t2();

	            mig2.setPK_REQ_REF_NO(PK_REQ_REF_NO);
	            mig2.setSRC_ID(SRC_ID);
	            if (IP_ADDRESS == null || IP_ADDRESS.isEmpty() || IP_ADDRESS.length() > 20) {
	                mig2.setCLIENT_IP(" ");
	            } else {
	                mig2.setCLIENT_IP(IP_ADDRESS);
	            }
	            if (TELLER_ID == null || TELLER_ID.isEmpty() || TELLER_ID.length() < 1 || TELLER_ID.matches(" ")) {
	                mig2.setTELLER_ID(" ");
	            } else if (TELLER_ID.length() > 10) {
	                mig2.setTELLER_ID(TELLER_ID.substring(TELLER_ID.length() - 10, TELLER_ID.length()));
	            } else {
	                mig2.setTELLER_ID(TELLER_ID);
	            }

	            mig2.setENTRY_DATE(entryDate1.format(time));
	            mig2.setTXN_NO("070805");
	            mig2.setTXN_NAME("accountChannelEnq");
	            mig2.setREQ_STR(REQ_STR);
				mig2.setRESPONSE_STATUS(" ");
				mig2.setERROR_CODE(" ");
				mig2.setERROR_DESCRIPTION(" ");
				mig2.setREQ_STR(REQ_STR);
				mig2.setRESP_STR(" ");
	            mig2.setRECD_TIME(RECD_TIME);
	            mig2.setRESP_TIME(entryDate.format(time));
				Clob clob=new javax.sql.rowset.serial.SerialClob(" ".toCharArray());
		        mig2.setRESPONSE_STRING(clob);
//	            mig2.setMigpk(pk2);
	            Integer version = mig2.getVersion(); 
	            System.out.println("Intial Version:----------------------------------------"+ version);
	            System.out.println("Intial Version:"+ mig2.getVersion());
	            
	            dayRepo2.save(mig2);
	            System.out.println("Saved Version:" + mig2.getVersion());

	        } else if (Logsaver == 0) {
	            Migenq_t3 mig3 = new Migenq_t3();
	            Migenqpk_t3 pk3 = new Migenqpk_t3();

	            pk3.setPK_REQ_REF_NO(PK_REQ_REF_NO);
	            pk3.setSRC_ID(SRC_ID);
	            if (IP_ADDRESS == null || IP_ADDRESS.isEmpty() || IP_ADDRESS.length() > 20) {
	                mig3.setCLIENT_IP(" ");
	            } else {
	                mig3.setCLIENT_IP(IP_ADDRESS);
	            }
	            if (TELLER_ID == null || TELLER_ID.isEmpty() || TELLER_ID.length() < 1 || TELLER_ID.matches(" ")) {
	                mig3.setTELLER_ID(" ");
	            } else if (TELLER_ID.length() > 10) {
	                mig3.setTELLER_ID(TELLER_ID.substring(TELLER_ID.length() - 10, TELLER_ID.length()));
	            } else {
	                mig3.setTELLER_ID(TELLER_ID);
	            }
	            
	            pk3.setENTRY_DATE(entryDate1.format(time));
				mig3.setTXN_NO("070805");
				mig3.setTXN_NAME("accountChannelEnq");							
				mig3.setRESPONSE_STATUS(" ");
				mig3.setERROR_CODE(" ");
				mig3.setERROR_DESCRIPTION(" ");
				mig3.setREQ_STR(REQ_STR);
				mig3.setRESP_STR(" ");
				pk3.setRECD_TIME(RECD_TIME);
				mig3.setRESP_TIME(entryDate.format(time));
				mig3.setMigpk(pk3);
				Clob clob=new javax.sql.rowset.serial.SerialClob(" ".toCharArray());
		        mig3.setRESPONSE_STRING(clob);
		        dayRepo3.save(mig3);
	        }
	}
	        catch (JpaOptimisticLockingFailureException e) {
	            // Handle the optimistic locking failure, trigger rollback and log the error
	            System.err.println("Optimistic lock failed####################################################: " + e.getMessage());
	            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
	            return false;
	        } catch (Exception e) {
	            // Catch other exceptions, trigger rollback and log the error
	            System.err.println("Error occurred%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%: " + e.getMessage());
	            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
	            return false;
	        }
	        

	        return true;
	    }
	   @Transactional
	   @Modifying
	    public boolean updateResponse(String ERROR_CODE, String RESPONSE_STATUS, String ERROR_DESCRIPTION, String RESPONSE_STRING, String RECD_TIME, String PK_REQ_REF_NO, String SRC_ID) 
	                                  throws SQLException {
	        int attempt = 0;
	        boolean success = false;

	        //Clob clob = new SerialClob(RESPONSE_STRING.toCharArray());

	        while (attempt < MAX_RETRIES && !success) {
	            try {
	                // Update Migenq_t2
	                Query query2 = entityManager.createQuery("UPDATE Migenq_t2 m SET m.RESPONSE_STATUS = :responseStatus, m.ERROR_CODE = :errorCode, m.ERROR_DESCRIPTION = :errorDescription WHERE m.PK_REQ_REF_NO = :pkReqRefNo AND m.SRC_ID = :srcId");
	                query2.setParameter("responseStatus", RESPONSE_STATUS);
	                query2.setParameter("errorCode", ERROR_CODE);
	                query2.setParameter("errorDescription", ERROR_DESCRIPTION);
	               // query2.setParameter("responseString", clob);
	                query2.setParameter("pkReqRefNo", PK_REQ_REF_NO);
	                System.out.println("Intialllllllllllllllllllllllllllllllllllllllll"+ PK_REQ_REF_NO );
	                query2.setParameter("srcId", SRC_ID);
	                int updated2 = query2.executeUpdate();
                System.out.println("Updated----------------------------"+ updated2 );


	                if (updated2 >= 0) {
	                    success = true;
	                } else {
	                    throw new RuntimeException("No records updated");
	                }

	            } catch (JpaOptimisticLockingFailureException e) {
	                attempt++;
	                if (attempt >= MAX_RETRIES) {
	                    throw e;  // Max retries reached, propagate the exception
	                }
	                try {
	                    Thread.sleep(100);  // Short delay before retrying
	                } catch (InterruptedException ie) {
	                    Thread.currentThread().interrupt();
	                }
	            }
	        }

	        return success;
	    }   
}
-----------------














































































import java.util.function.Supplier;

public class RetryUtils {
    public static <T> T retry(Supplier<T> function, int maxAttempts, long delay) throws Exception {
        int attempts = 0;
        while (true) {
            try {
                return function.get();
            } catch (OptimisticLockingFailureException e) {
                attempts++;
                if (attempts >= maxAttempts) {
                    throw e;
                }
                Thread.sleep(delay);
                delay *= 2; // Exponential backoff
            }
        }
    }
}

@Transactional
public boolean updateResponse(String PK_REQ_REF_NO, String SRC_ID, String RESPONSE_STATUS, String RESPONSE_STRING, String ERROR_CODE, String ERROR_DESCRIPTION, String RECD_TIME) throws SerialException, SQLException {
    DateTimeFormatter entryDate = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss:SSS");
    LocalDateTime time = LocalDateTime.now();
    Clob clob = new javax.sql.rowset.serial.SerialClob(RESPONSE_STRING.toCharArray());

    int Logsaver = LocalDate.now().getDayOfMonth() % 3;

    try {
        return RetryUtils.retry(() -> {
            if (Logsaver == 1) {
                Migenqpk_t1 pk = new Migenqpk_t1();
                pk.setPK_REQ_REF_NO(PK_REQ_REF_NO);
                pk.setSRC_ID(SRC_ID);

                Migenq_t1 mig = dayRepo1.findById(pk).orElseThrow(() -> new RuntimeException("Record not found"));
                System.out.println("Fetched Version (before): " + mig.getVersion());

                mig.setRESPONSE_STATUS(RESPONSE_STATUS);
                mig.setERROR_CODE(ERROR_CODE);
                mig.setERROR_DESCRIPTION(ERROR_DESCRIPTION);
                mig.setRESPONSE_STRING(clob);
                mig.setRESP_TIME(entryDate.format(time));

                System.out.println("Updating Version from: " + mig.getVersion());
                dayRepo1.save(mig);
                System.out.println("Updated Version to: " + mig.getVersion());
            } else if (Logsaver == 2) {
                Migenqpk_t2 pk = new Migenqpk_t2();
                pk.setPK_REQ_REF_NO(PK_REQ_REF_NO);
                pk.setSRC_ID(SRC_ID);

                Migenq_t2 mig2 = dayRepo2.findById(pk).orElseThrow(() -> new RuntimeException("Record not found"));

                mig2.setRESPONSE_STATUS(RESPONSE_STATUS);
                mig2.setERROR_CODE(ERROR_CODE);
                mig2.setERROR_DESCRIPTION(ERROR_DESCRIPTION);
                mig2.setRESPONSE_STRING(clob);
                mig2.setRESP_TIME(entryDate.format(time));

                dayRepo2.save(mig2);
            } else if (Logsaver == 0) {
                Migenqpk_t3 pk = new Migenqpk_t3();
                pk.setPK_REQ_REF_NO(PK_REQ_REF_NO);
                pk.setSRC_ID(SRC_ID);

                Migenq_t3 mig3 = dayRepo3.findById(pk).orElseThrow(() -> new RuntimeException("Record not found"));

                mig3.setRESPONSE_STATUS(RESPONSE_STATUS);
                mig3.setERROR_CODE(ERROR_CODE);
                mig3.setERROR_DESCRIPTION(ERROR_DESCRIPTION);
                mig3.setRESPONSE_STRING(clob);
                mig3.setRESP_TIME(entryDate.format(time));

                dayRepo3.save(mig3);
            }
            return true;
        }, 5, 1000); // 5 attempts with initial 1 second delay
    } catch (OptimisticLockingFailureException e) {
        System.err.println("Optimistic lock failed after retries: " + e.getMessage());
        return false;
    } catch (Exception e) {
        System.err.println("Error occurred: " + e.getMessage());
        return false;
    }
}



import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.CrudRepository;
import org.springframework.transaction.annotation.Transactional;

public interface Migenq_t1DetailRefRepo extends CrudRepository<Migenq_t1, Migenqpk_t1> {
    
    @Transactional
    @Modifying
    @Query("UPDATE Migenq_t1 m SET m.RESPONSE_STATUS = :responseStatus, m.ERROR_CODE = :errorCode, m.ERROR_DESCRIPTION = :errorDescription, m.RESPONSE_STRING = :responseString, m.RESP_TIME = :respTime WHERE m.migpk.PK_REQ_REF_NO = :pkReqRefNo AND m.migpk.SRC_ID = :srcId AND m.version = :version")
    int updateResponse(
        String responseStatus, 
        String errorCode, 
        String errorDescription, 
        Clob responseString, 
        String respTime, 
        String pkReqRefNo, 
        String srcId, 
        Long version
    );
}


------

@Transactional
public boolean updateResponse(String PK_REQ_REF_NO, String SRC_ID, String RESPONSE_STATUS, String RESPONSE_STRING, String ERROR_CODE, String ERROR_DESCRIPTION, String RECD_TIME) throws SerialException, SQLException {
    DateTimeFormatter entryDate = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss:SSS");
    LocalDateTime time = LocalDateTime.now();
    Clob clob = new javax.sql.rowset.serial.SerialClob(RESPONSE_STRING.toCharArray());
    String formattedRespTime = entryDate.format(time);

    int Logsaver = LocalDate.now().getDayOfMonth() % 3;

    try {
        return RetryUtils.retry(() -> {
            if (Logsaver == 1) {
                Migenqpk_t1 pk = new Migenqpk_t1();
                pk.setPK_REQ_REF_NO(PK_REQ_REF_NO);
                pk.setSRC_ID(SRC_ID);

                Migenq_t1 mig = dayRepo1.findById(pk).orElseThrow(() -> new RuntimeException("Record not found"));
                Long version = mig.getVersion();

                int updatedRows = dayRepo1.updateResponse(RESPONSE_STATUS, ERROR_CODE, ERROR_DESCRIPTION, clob, formattedRespTime, PK_REQ_REF_NO, SRC_ID, version);
                if (updatedRows == 0) {
                    throw new OptimisticLockingFailureException("Optimistic lock failed");
                }
            } else if (Logsaver == 2) {
                // Similar logic for Migenq_t2 and Migenq_t3 with their respective repositories
            }
            return true;
        }, 5, 1000); // 5 attempts with initial 1 second delay
    } catch (OptimisticLockingFailureException e) {
        System.err.println("Optimistic lock failed after retries: " + e.getMessage());
        return false;
    } catch (Exception e) {
        System.err.println("Error occurred: " + e.getMessage());
        return false;
    }
}



import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.CrudRepository;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.repository.query.Param;

public interface Migenq_t1DetailRefRepo extends CrudRepository<Migenq_t1, Migenqpk_t1> {
    
    @Transactional
    @Modifying
    @Query("UPDATE Migenq_t1 m SET m.RESPONSE_STATUS = :responseStatus, m.ERROR_CODE = :errorCode, m.ERROR_DESCRIPTION = :errorDescription, m.RESPONSE_STRING = :responseString, m.RESP_TIME = :respTime WHERE m.migpk.PK_REQ_REF_NO = :pkReqRefNo AND m.migpk.SRC_ID = :srcId AND m.version = :version")
    int updateResponse(
        @Param("responseStatus") String responseStatus, 
        @Param("errorCode") String errorCode, 
        @Param("errorDescription") String errorDescription, 
        @Param("responseString") Clob responseString, 
        @Param("respTime") String respTime, 
        @Param("pkReqRefNo") String pkReqRefNo, 
        @Param("srcId") String srcId, 
        @Param("version") Long version
    );
}



-----------

import javax.transaction.Transactional;
import java.sql.Clob;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import javax.sql.rowset.serial.SerialClob;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.OptimisticLockingFailureException;
import org.springframework.stereotype.Service;

@Service
public class MigenqDetailsRepositoryImpl {

    @Autowired
    private Migenq_t1DetailRefRepo dayRepo1;

    @Transactional
    public boolean updateResponse(String PK_REQ_REF_NO, String SRC_ID, String RESPONSE_STATUS, String RESPONSE_STRING, String ERROR_CODE, String ERROR_DESCRIPTION, String RECD_TIME) throws SQLException {

        DateTimeFormatter entryDate = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss:SSS");
        LocalDateTime time = LocalDateTime.now();
        Clob clob = new SerialClob(RESPONSE_STRING.toCharArray());
        String formattedRespTime = entryDate.format(time);

        int maxAttempts = 5;
        int attempt = 0;
        boolean success = false;

        while (attempt < maxAttempts && !success) {
            try {
                attempt++;
                Migenqpk_t1 pk = new Migenqpk_t1();
                pk.setPK_REQ_REF_NO(PK_REQ_REF_NO);
                pk.setSRC_ID(SRC_ID);

                Migenq_t1 mig = dayRepo1.findById(pk).orElseThrow(() -> new RuntimeException("Record not found"));
                Long version = mig.getVersion();

                int updatedRows = dayRepo1.updateResponse(RESPONSE_STATUS, ERROR_CODE, ERROR_DESCRIPTION, clob, formattedRespTime, PK_REQ_REF_NO, SRC_ID, version);
                if (updatedRows == 0) {
                    throw new OptimisticLockingFailureException("Optimistic lock failed");
                }
                success = true;
            } catch (OptimisticLockingFailureException e) {
                if (attempt >= maxAttempts) {
                    System.err.println("Optimistic lock failed after retries: " + e.getMessage());
                    return false;
                }
                // Optionally: Add a delay before retrying
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException ie) {
                    Thread.currentThread().interrupt();
                    throw new RuntimeException("Thread interrupted", ie);
                }
            } catch (Exception e) {
                System.err.println("Error occurred: " + e.getMessage());
                return false;
            }
        }
        return success;
    }
}

-------

@Transactional
public boolean updateResponseWithRetry(String PK_REQ_REF_NO, String SRC_ID, String RESPONSE_STATUS, String ERROR_CODE, String ERROR_DESCRIPTION, String RESPONSE_STRING, int maxRetries) {
    int attempt = 0;
    boolean success = false;
    Clob clob = new javax.sql.rowset.serial.SerialClob(RESPONSE_STRING.toCharArray());

    while (attempt < maxRetries && !success) {
        try {
            Migenqpk_t1 pk = new Migenqpk_t1();
            pk.setPK_REQ_REF_NO(PK_REQ_REF_NO);
            pk.setSRC_ID(SRC_ID);
            
            Migenq_t1 mig = dayRepo1.findById(pk).orElseThrow(() -> new RuntimeException("Record not found"));
            
            // Update each field sequentially
            mig.setRESPONSE_STATUS(RESPONSE_STATUS);
            dayRepo1.save(mig);
            dayRepo1.flush();

            mig.setERROR_CODE(ERROR_CODE);
            dayRepo1.save(mig);
            dayRepo1.flush();

            mig.setERROR_DESCRIPTION(ERROR_DESCRIPTION);
            dayRepo1.save(mig);
            dayRepo1.flush();

            mig.setRESPONSE_STRING(clob);
            dayRepo1.save(mig);
            dayRepo1.flush();

            success = true; // Mark success after all updates

        } catch (OptimisticLockingFailureException e) {
            attempt++;
            System.err.println("Optimistic lock failed, retrying... Attempt: " + attempt);
            if (attempt >= maxRetries) {
                System.err.println("Max retries reached. Failing the operation.");
                return false;
            }
            // Optionally, add a small delay before retrying
            try {
                Thread.sleep(100); // 100ms delay
            } catch (InterruptedException ie) {
                Thread.currentThread().interrupt();
            }
        } catch (Exception e) {
            System.err.println("Error occurred: " + e.getMessage());
            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
            return false;
        }
    }

    return success;
}





import org.springframework.transaction.annotation.Transactional;
import org.springframework.orm.jpa.JpaOptimisticLockingFailureException;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;
import javax.sql.rowset.serial.SerialClob;
import java.sql.Clob;
import java.sql.SQLException;

@Service
public class MigenqDetailsService {

    @PersistenceContext
    private EntityManager entityManager;

    private static final int MAX_RETRIES = 3;

    @Transactional
    public boolean updateResponse(String PK_REQ_REF_NO, String SRC_ID, String RESPONSE_STATUS, 
                                  String ERROR_CODE, String ERROR_DESCRIPTION, String RESPONSE_STRING) 
                                  throws SQLException {
        int attempt = 0;
        boolean success = false;

        Clob clob = new SerialClob(RESPONSE_STRING.toCharArray());

        while (attempt < MAX_RETRIES && !success) {
            try {
                // Update Migenq_t1
                Query query1 = entityManager.createQuery("UPDATE Migenq_t1 m SET m.responseStatus = :responseStatus, " +
                        "m.errorCode = :errorCode, m.errorDescription = :errorDescription, " +
                        "m.responseString = :responseString WHERE m.migpk.PK_REQ_REF_NO = :pkReqRefNo AND " +
                        "m.migpk.SRC_ID = :srcId");
                query1.setParameter("responseStatus", RESPONSE_STATUS);
                query1.setParameter("errorCode", ERROR_CODE);
                query1.setParameter("errorDescription", ERROR_DESCRIPTION);
                query1.setParameter("responseString", clob);
                query1.setParameter("pkReqRefNo", PK_REQ_REF_NO);
                query1.setParameter("srcId", SRC_ID);
                int updated1 = query1.executeUpdate();

                // Update Migenq_t2
                Query query2 = entityManager.createQuery("UPDATE Migenq_t2 m SET m.responseStatus = :responseStatus, " +
                        "m.errorCode = :errorCode, m.errorDescription = :errorDescription, " +
                        "m.responseString = :responseString WHERE m.migpk.PK_REQ_REF_NO = :pkReqRefNo AND " +
                        "m.migpk.SRC_ID = :srcId");
                query2.setParameter("responseStatus", RESPONSE_STATUS);
                query2.setParameter("errorCode", ERROR_CODE);
                query2.setParameter("errorDescription", ERROR_DESCRIPTION);
                query2.setParameter("responseString", clob);
                query2.setParameter("pkReqRefNo", PK_REQ_REF_NO);
                query2.setParameter("srcId", SRC_ID);
                int updated2 = query2.executeUpdate();

                // Update Migenq_t3
                Query query3 = entityManager.createQuery("UPDATE Migenq_t3 m SET m.responseStatus = :responseStatus, " +
                        "m.errorCode = :errorCode, m.errorDescription = :errorDescription, " +
                        "m.responseString = :responseString WHERE m.migpk.PK_REQ_REF_NO = :pkReqRefNo AND " +
                        "m.migpk.SRC_ID = :srcId");
                query3.setParameter("responseStatus", RESPONSE_STATUS);
                query3.setParameter("errorCode", ERROR_CODE);
                query3.setParameter("errorDescription", ERROR_DESCRIPTION);
                query3.setParameter("responseString", clob);
                query3.setParameter("pkReqRefNo", PK_REQ_REF_NO);
                query3.setParameter("srcId", SRC_ID);
                int updated3 = query3.executeUpdate();

                if (updated1 > 0 || updated2 > 0 || updated3 > 0) {
                    success = true;
                } else {
                    throw new RuntimeException("No records updated");
                }

            } catch (JpaOptimisticLockingFailureException e) {
                attempt++;
                if (attempt >= MAX_RETRIES) {
                    throw e;  // Max retries reached, propagate the exception
                }
                try {
                    Thread.sleep(100);  // Short delay before retrying
                } catch (InterruptedException ie) {
                    Thread.currentThread().interrupt();
                }
            }
        }

        return success;
    }
}

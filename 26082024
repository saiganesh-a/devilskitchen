package com.tcs.bancs.microservices.config;
import java.util.HashMap;
import java.util.Set;

import javax.persistence.EntityManagerFactory;
import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.boot.jdbc.DataSourceBuilder;
import org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
import org.springframework.orm.jpa.JpaTransactionManager;
import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.annotation.EnableTransactionManagement;

import com.tcs.bancs.microservices.util.FrameworkConstants;


@Configuration
//@PropertySource("classpath:DBProperties.properties")
@PropertySource("file:${ChannelsPropConfigPath}/Config/DBProperties.properties")
@ConditionalOnProperty(
	    value="ref.module.enabled", 
	    havingValue = FrameworkConstants.TRUE)
@EnableTransactionManagement
@EnableJpaRepositories(entityManagerFactoryRef = "refEntityManagerFactory",
    transactionManagerRef = "refTransactionManager", basePackages = {FrameworkConstants.RefRepoPackage})
public class CBSRefDbConfig {
	public static Set<Class<? extends Object>> refClasses=null ;
	 @Value("${ref.jpa.properties.hibernate.dialect:#{null}}")
	  private String hibernateDialect;

@Bean(name = "refDataSource")
@ConfigurationProperties(prefix = "ref.datasource")
public DataSource daydataSource() {
	return DataSourceBuilder.create().build();
}


@Bean(name = "refTransactionManager")  
public PlatformTransactionManager dayTransactionManager(
    @Qualifier("refEntityManagerFactory") EntityManagerFactory dayEntityManagerFactory) {
  return new JpaTransactionManager(dayEntityManagerFactory);
}


@Bean(name = "refEntityManagerFactory")
public LocalContainerEntityManagerFactoryBean dayEntityManagerFactory(
    EntityManagerFactoryBuilder builder, @Qualifier("refDataSource") DataSource dataSource) {
	HashMap<String, Object> props = new HashMap<>();
    props.put("hibernate.dialect", hibernateDialect);
  return builder.dataSource(dataSource).properties(props).packages(FrameworkConstants.DB_MODEL_PATH).persistenceUnit("ref")
      .build();
}

  
}

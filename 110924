Results Outline
Mass Assignment: Insecure Binder Configuration (2 issues)
Abstract
The framework binder used for binding the HTTP request parameters to the model class has not been explicitly
configured to allow, or disallow certain attributes.
Explanation
To ease development and increase productivity, most modern frameworks allow an object to be automatically
instantiated and populated with the HTTP request parameters whose names match an attribute of the class to be
bound. Automatic instantiation and population of objects speeds up development, but can lead to serious problems if
implemented without caution. Any attribute in the bound classes, or nested classes, will be automatically bound to the
HTTP request parameters. Therefore, malicious users will be able to assign a value to any attribute in bound or nested
classes, even if they are not exposed to the client through web forms or API contracts.
Example 1: Using Spring MVC with no additional configuration, the following controller method will bind the HTTP
request parameters to any attribute in the User or Details classes:
@RequestMapping(method = RequestMethod.POST)
public String registerUser(@ModelAttribute("user") User user, BindingResult
result, SessionStatus status) {
 if (db.save(user).hasErrors()) {
 return "CustomerForm";
 } else {
 status.setComplete();
 return "CustomerSuccess";
 }
}
Where User class is defined as:
public class User {
 private String name;
 private String lastname;
 private int age;
 private Details details;
 // Public Getters and Setters
 ...
}
and Details class is defined as:
public class Details {
 private boolean is_admin;
 private int id;
 private Date login_date;
 // Public Getters and Setters
 ...
Sep 10, 2024 6:31 PM
© Copyright [2008-2024] Micro Focus or one of its affiliates.
7
}
Recommendation
When using frameworks that provide automatic model binding capabilities, it is a best practice to control which
attributes will be bound to the model object so that even if attackers figure out other non-exposed attributes of the
model or nested classes, they will not be able to bind arbitrary values from HTTP request parameters.
Depending on the framework used there will be different ways to control the model binding process:
Spring MVC:
It is possible to control which HTTP request parameters will be used in the binding process and which ones will be
ignored.
In Spring MVC applications using @ModelAttribute annotated parameters, the binder can be configured to
control which attributes should be bound. In order to do so, a method can be annotated with @InitBinder so that
the framework will inject a reference to the Spring Model Binder. The Spring Model Binder can be configured to
control the attribute binding process with the setAllowedFields and setDisallowedFields methods.
Spring MVC applications extending BaseCommandController can override the
initBinder(HttpServletRequest request, ServletRequestDataBinder binder) method in
order to get a reference to the Spring Model Binder.
Example 2: The Spring Model Binder (3.x) is configured to disallow the binding of sensitive attributes:
final String[] DISALLOWED_FIELDS = new String[]{"details.role", "details.age",
"is_admin"};
@InitBinder
public void initBinder(WebDataBinder binder) {
 binder.setDisallowedFields(DISALLOWED_FIELDS);
}
Example 3: The Spring Model Binder (2.x) is configured to disallow the binding of sensitive attributes:
@Override
protected void initBinder(HttpServletRequest request, ServletRequestDataBinder
binder) throws Exception {
 binder.setDisallowedFields(new String[]{"details.role", "details.age",
"is_admin"});
}
In Spring MVC Applications using @RequestBody annotated parameters, the binding process is handled by
HttpMessageConverter instances which will use libraries such as Jackson and JAXB to convert the HTTP
request body into Java Objects. These libraries offer annotations to control which fields should be allowed or
disallowed. For example, for the Jackson JSON library, the @JsonIgnore annotation can be used to prevent a field
from being bound to the request.
Example 4: A controller method binds an HTTP request to an instance of the Employee class using the
@RequestBody annotation.
 @RequestMapping(value="/add/employee", method=RequestMethod.POST,
consumes="text/html")
 public void addEmployee(@RequestBody Employee employee){
Sep 10, 2024 6:31 PM
© Copyright [2008-2024] Micro Focus or one of its affiliates.
8
 // Do something with the employee object.
 }
The application uses the default Jackson HttpMessageConverter to bind JSON HTTP requests to the
Employee class. In order to prevent the binding of the is_admin sensitive field, use the @JsonIgnore
annotation:
public class Employee {
 @JsonIgnore
 private boolean is_admin;
 ...
 // Public Getters and Setters
 ...
}
Note: Check the following REST frameworks information for more details on how to configure Jackson and JAXB
annotations.
Apache Struts:
Struts 1 and 2 will only bind HTTP request parameters to those Actions or ActionForms attributes which have
an associated public setter accessor. If an attribute should not be bound to the request, its setter should be made
private.
Example 5: Configure a private setter so that Struts framework will not automatically bind any HTTP request
parameter:
private String role;
private void setRole(String role) {
 this.role = role;
}
REST frameworks:
Most REST frameworks will automatically bind any HTTP request bodies with content type JSON or XML to a model
object. Depending on the libraries used for JSON and XML processing, there will be different ways of controlling the
binding process. The following are some examples for JAXB (XML) and Jackson (JSON):
Example 6: Models bound from XML documents using Oracle's JAXB library can control the binding process using
different annotations such as @XmlAccessorType, @XmlAttribute, @XmlElement and @XmlTransient.
The binder can be told not to bind any attributes by default, by annotating the models using the
@XmlAccessorType annotation with the value XmlAccessType.NONE and then selecting which fields should
be bound using @XmlAttribute and @XmlElement annotations:
@XmlRootElement
@XmlAccessorType(XmlAccessType.NONE)
public class User {
 private String role;
 private String name;
 @XmlAttribute
 public String getName() {
Sep 10, 2024 6:31 PM
© Copyright [2008-2024] Micro Focus or one of its affiliates.
9
 return name;
 }
 public void setName(String name) {
 this.name = name;
 }
 public String getRole() {
 return role;
 }
 public void setRole(String role) {
 this.role = role;
 }
Example 7: Models bound from JSON documents using the Jackson library can control the binding process using
different annotations such as @JsonIgnore, @JsonIgnoreProperties, @JsonIgnoreType and
@JsonInclude. The binder can be told to ignore certain attributes by annotating them with @JsonIgnore
annotation:
public class User {
 @JsonIgnore
 private String role;
 private String name;
 public String getName() {
 return name;
 }
 public void setName(String name) {
 this.name = name;
 }
 public String getRole() {
 return role;
 }
 public void setRole(String role) {
 this.role = role;
 }
A different approach to protecting against mass assignment vulnerabilities is using a layered architecture where the
HTTP request parameters are bound to DTO objects. The DTO objects are only used for that purpose, exposing only
those attributes defined in the web forms or API contracts, and then mapping these DTO objects to Domain Objects
where the rest of the private attributes can be defined.
Issue Summary
Sep 10, 2024 6:31 PM
© Copyright [2008-2024] Micro Focus or one of its affiliates.
10
Engine Breakdown
SCA WebInspect SecurityScope Total
Mass Assignment: Insecure Binder Configuration 2 0 0 2
Total 2 0 0 2
Mass Assignment: Insecure Binder Configuration High
Package: com.tcs.bancs.microservices.services
Check_Digit_Service/TCSBaNCSQueryMicroservices/src/com/tcs/bancs/microservices/
services/CHKDService.java, line 124 (Mass Assignment: Insecure Binder Configuration) High
Issue Details
Kingdom: API Abuse
Scan Engine: SCA (Structural)
Sink Details
Sink: Function: getCustomerDetails
Enclosing Method: getCustomerDetails()
File: Check_Digit_Service/TCSBaNCSQueryMicroservices/src/com/tcs/bancs/microservices/services/CHKDService.java:
124
121 @PostMapping(value = { "/CHKD" }, produces = { "application/json" })
122 @CrossOrigin()
123 @JsonIgnore
124 public String getCustomerDetails(@RequestBody(required = true)RequestBean reqbean,HttpServletRequest request, @RequestHeader
HttpHeaders headers, HttpServletResponse response) throws SerialException, SQLException, IOException, RrnException, SrcException
125 {
126 try {
127 String[] arr = {bancsTraceState, masterDQType, bancsHost, fnsSysnum, ctrlSysnum, daySysnum, nightSysnum, non24hsum,
defRMode, masterDB1, masterDB2, servicesFlag};
PFEnquiry_Service/TCSBaNCSQueryMicroservices/src/com/tcs/bancs/microservices/
services/PFMOBEnquiryService.java, line 138 (Mass Assignment: Insecure Binder
Configuration)
High
Issue Details
Kingdom: API Abuse
Scan Engine: SCA (Structural)
Sink Details
Sink: Function: getCustomerDetails
Enclosing Method: getCustomerDetails()
File: PFEnquiry_Service/TCSBaNCSQueryMicroservices/src/com/tcs/bancs/microservices/services/
PFMOBEnquiryService.java:138
135 @PostMapping(value = { "/PFMOBEnq" }, produces = { "application/json" })
136 @CrossOrigin()
137 @JsonIgnoreProperties(ignoreUnknown = true)
138 public String getCustomerDetails(@RequestBody(required = true)RequestBean reqbean,HttpServletRequest request, @RequestHeader
HttpHeaders headers, HttpServletResponse response) throws SerialException, SQLException, IOException, RrnException, SrcException
139 {
Sep 10, 2024 6:31 PM
© Copyright [2008-2024] Micro Focus or one of its affiliates.
11
Mass Assignment: Insecure Binder Configuration High
Package: com.tcs.bancs.microservices.services
PFEnquiry_Service/TCSBaNCSQueryMicroservices/src/com/tcs/bancs/microservices/
services/PFMOBEnquiryService.java, line 138 (Mass Assignment: Insecure Binder
Configuration)
High
140 try {
141 String[] arr = {bancsTraceState, masterDQType, bancsHost, fnsSysnum, ctrlSysnum, day

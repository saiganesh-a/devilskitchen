package com.tcs.bancs.microservices.impl;

import java.io.IOException;
import java.sql.Clob;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Base64;

import javax.sql.rowset.serial.SerialException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.dao.OptimisticLockingFailureException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.interceptor.TransactionAspectSupport;

import com.tcs.bancs.microservices.db.model.Migenq_t1;
import com.tcs.bancs.microservices.db.model.Migenq_t2;
import com.tcs.bancs.microservices.db.model.Migenq_t3;
import com.tcs.bancs.microservices.db.model.Migenqpk_t1;
import com.tcs.bancs.microservices.db.model.Migenqpk_t2;
import com.tcs.bancs.microservices.db.model.Migenqpk_t3;
import com.tcs.bancs.microservices.exception.RrnException;
import com.tcs.bancs.microservices.exception.SrcException;

import com.tcs.bancs.microservices.repository.ref.Migenq_t1DetailRefRepo;
import com.tcs.bancs.microservices.repository.ref.Migenq_t2DetailRefRepo;
import com.tcs.bancs.microservices.repository.ref.Migenq_t3DetailRefRepo;


@Service
public class MigenqDetailsRepositoryImpl {

	private final Migenq_t1DetailRefRepo dayRepo1;
	private final Migenq_t2DetailRefRepo dayRepo2;
	private final Migenq_t3DetailRefRepo dayRepo3;
	

	public MigenqDetailsRepositoryImpl(Migenq_t1DetailRefRepo dayRepo1, Migenq_t2DetailRefRepo dayRepo2,
			Migenq_t3DetailRefRepo dayRepo3) {
		super();
		this.dayRepo1 = dayRepo1;
		this.dayRepo2 = dayRepo2;
		this.dayRepo3 = dayRepo3;
	}
	Logger logger = LoggerFactory.getLogger(MigenqDetailsRepositoryImpl.class);
	public boolean saveInitialRequest(String REQ_STR, String CLIENT_IP, String TELLER_ID, String PK_REQ_REF_NO, String SRC_ID, String RECD_TIME, String IP_ADDRESS) throws SerialException, SQLException, IOException, RrnException, SrcException {

		DateTimeFormatter entryDate = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss:SSS");
		DateTimeFormatter entryDate1 = DateTimeFormatter.ofPattern("yyyy-MM-dd");
		LocalDateTime time = LocalDateTime.now();
		LocalDate date = LocalDate.now();		
	       int dayCount = date.getDayOfMonth();
	       int Logsaver = dayCount%3;
		if (PK_REQ_REF_NO == null || PK_REQ_REF_NO.length() >= 26 || PK_REQ_REF_NO.isEmpty()) {
			PK_REQ_REF_NO = " ";
		}	
		if (SRC_ID == null || SRC_ID.length() > 6 || SRC_ID.isEmpty()) {
			SRC_ID = " ";
		}

		if (PK_REQ_REF_NO == null) {
		    throw new RrnException();
		} else if (SRC_ID == null) {
		    throw new SrcException();
		}
		
		try {
	        if (Logsaver == 1) {
	            Migenq_t1 mig = new Migenq_t1();
	            Migenqpk_t1 pk = new Migenqpk_t1();

	            pk.setPK_REQ_REF_NO(PK_REQ_REF_NO);
	            pk.setSRC_ID(SRC_ID);
	            if (IP_ADDRESS == null || IP_ADDRESS.isEmpty() || IP_ADDRESS.length() > 20) {
	                mig.setCLIENT_IP(" ");
	            } else {
	                mig.setCLIENT_IP(IP_ADDRESS);
	            }
	            if (TELLER_ID == null || TELLER_ID.isEmpty() || TELLER_ID.length() < 1 || TELLER_ID.matches(" ")) {
	                mig.setTELLER_ID(" ");
	            } else if (TELLER_ID.length() > 10) {
	                mig.setTELLER_ID(TELLER_ID.substring(TELLER_ID.length() - 10, TELLER_ID.length()));
	            } else {
	                mig.setTELLER_ID(TELLER_ID);
	            }

	            pk.setENTRY_DATE(entryDate1.format(time));
	            mig.setTXN_NO("67000");
	            mig.setTXN_NAME("CSRC_SERVICE");
	            mig.setREQ_STR(REQ_STR);
				mig.setRESPONSE_STATUS(" ");
				mig.setERROR_CODE(" ");
				mig.setERROR_DESCRIPTION(" ");
				mig.setREQ_STR(REQ_STR);
				mig.setRESP_STR(" ");
	            pk.setRECD_TIME(RECD_TIME);
	            mig.setRESP_TIME(entryDate.format(time));
				Clob clob=new javax.sql.rowset.serial.SerialClob(" ".toCharArray());
		        mig.setRESPONSE_STRING(clob);
	            mig.setMigpk(pk);
	            dayRepo1.save(mig);
	            
	        } else if (Logsaver == 2) {
	            Migenq_t2 mig2 = new Migenq_t2();
	            Migenqpk_t2 pk2 = new Migenqpk_t2();
	            pk2.setPK_REQ_REF_NO(PK_REQ_REF_NO);
	            pk2.setSRC_ID(SRC_ID);
	            if (IP_ADDRESS == null || IP_ADDRESS.isEmpty() || IP_ADDRESS.length() > 20) {
	                mig2.setCLIENT_IP(" ");
	            } else {
	                mig2.setCLIENT_IP(IP_ADDRESS);
	            }
	            if (TELLER_ID == null || TELLER_ID.isEmpty() || TELLER_ID.length() < 1 || TELLER_ID.matches(" ")) {
	                mig2.setTELLER_ID(" ");
	            } else if (TELLER_ID.length() > 10) {
	                mig2.setTELLER_ID(TELLER_ID.substring(TELLER_ID.length() - 10, TELLER_ID.length()));
	            } else {
	                mig2.setTELLER_ID(TELLER_ID);
	            }

	            pk2.setENTRY_DATE(entryDate1.format(time));
	            mig2.setTXN_NO("67000");
	            mig2.setTXN_NAME("CSRC_SERVICE");
	            mig2.setREQ_STR(REQ_STR);
				mig2.setRESPONSE_STATUS(" ");
				mig2.setERROR_CODE(" ");
				mig2.setERROR_DESCRIPTION(" ");
				mig2.setREQ_STR(REQ_STR);
				mig2.setRESP_STR(" ");
	            pk2.setRECD_TIME(RECD_TIME);
	            mig2.setRESP_TIME(entryDate.format(time));
	            mig2.setMigpk(pk2);
				Clob clob=new javax.sql.rowset.serial.SerialClob(" ".toCharArray());
		        mig2.setRESPONSE_STRING(clob);
	            dayRepo2.save(mig2);

	        } else if (Logsaver == 0) {
	            Migenq_t3 mig3 = new Migenq_t3();
	            Migenqpk_t3 pk3 = new Migenqpk_t3();

	            pk3.setPK_REQ_REF_NO(PK_REQ_REF_NO);
	            pk3.setSRC_ID(SRC_ID);
	            if (IP_ADDRESS == null || IP_ADDRESS.isEmpty() || IP_ADDRESS.length() > 20) {
	                mig3.setCLIENT_IP(" ");
	            } else {
	                mig3.setCLIENT_IP(IP_ADDRESS);
	            }
	            if (TELLER_ID == null || TELLER_ID.isEmpty() || TELLER_ID.length() < 1 || TELLER_ID.matches(" ")) {
	                mig3.setTELLER_ID(" ");
	            } else if (TELLER_ID.length() > 10) {
	                mig3.setTELLER_ID(TELLER_ID.substring(TELLER_ID.length() - 10, TELLER_ID.length()));
	            } else {
	                mig3.setTELLER_ID(TELLER_ID);
	            }
	            
	            pk3.setENTRY_DATE(entryDate1.format(time));
				mig3.setTXN_NO("67000");
				mig3.setTXN_NAME("CSRC_SERVICE");							
				mig3.setRESPONSE_STATUS(" ");
				mig3.setERROR_CODE(" ");
				mig3.setERROR_DESCRIPTION(" ");
				mig3.setREQ_STR(REQ_STR);
				mig3.setRESP_STR(" ");
				pk3.setRECD_TIME(RECD_TIME);
				mig3.setRESP_TIME(entryDate.format(time));
				mig3.setMigpk(pk3);
				Clob clob=new javax.sql.rowset.serial.SerialClob(" ".toCharArray());
		        mig3.setRESPONSE_STRING(clob);
		        dayRepo3.save(mig3);
	        }
		}
	        catch (OptimisticLockingFailureException e) {
	        	logger.error("Optimistic lock failed at initial save: " + e.getMessage());
	            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
	            return false;
	        } catch (Exception e) {
	        	logger.error("Error occurred at initial save: " + e.getMessage());
	            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
	            return false;
	        }
	        return true;
	    }
	    
   public boolean updateResponse(String RESPONSE_STATUS, String ERROR_CODE, String ERROR_DESCRIPTION, String RESPONSE_STRING, String RESP_STR, String RECD_TIME, String PK_REQ_REF_NO, String SRC_ID) throws SerialException, SQLException {
       Clob clob = new javax.sql.rowset.serial.SerialClob(RESPONSE_STRING.toCharArray());
       LocalDate date = LocalDate.now();	
       int dayCount = date.getDayOfMonth();
       int Logsaver = dayCount%3;
       try {
    	   if (Logsaver == 1) {
               int updatedRows = dayRepo1.updateResponse(RESPONSE_STATUS, ERROR_CODE, ERROR_DESCRIPTION, clob, RESP_STR, PK_REQ_REF_NO);
               if (updatedRows == 0) {
            	   logger.error("No Rows Updated Due to data miss match on query");
               }
           }
    	   else if (Logsaver == 2) {
               int updatedRows = dayRepo2.updateResponse(RESPONSE_STATUS, ERROR_CODE, ERROR_DESCRIPTION, clob, RESP_STR, PK_REQ_REF_NO);
               if (updatedRows == 0) {
            	   logger.error("No Rows Updated Due to data miss match on query");
               }
           }
           else if (Logsaver == 0) {
                int updatedRows = dayRepo3.updateResponse(RESPONSE_STATUS, ERROR_CODE, ERROR_DESCRIPTION, clob, RESP_STR, PK_REQ_REF_NO);
                if (updatedRows == 0) {
                	logger.error("No Rows Updated Due to data miss match on query");
                }
           }
           return true;
       } catch (OptimisticLockingFailureException e) {
    	   logger.error("Optimistic lock failed after retries: " + e.getMessage());
           return false;
       } catch (Exception e) {
    	   logger.error("Error occurred: " + e.getMessage());
           return false;
       }
   }
}
============================================================================================

Results Outline
Access Control: Database (3 issues)
Abstract
Without proper access control, executing a SQL statement that contains a user-controlled primary key can
allow an attacker to view unauthorized records.
Explanation
Database access control errors occur when: 1. Data enters a program from an untrusted source. 2. The
data is used to specify the value of a primary key in a SQL query. Example 1: The following code uses a
parameterized statement, which escapes metacharacters and prevents SQL injection vulnerabilities, to
construct and execute a SQL query that searches for an invoice matching the specified identifier [1]. The
identifier is selected from a list of all invoices associated with the current authenticated user.
...
id = Integer.decode(request.getParameter("invoiceID"));
String query = "SELECT * FROM invoices WHERE id = ?";
PreparedStatement stmt = conn.prepareStatement(query);
stmt.setInt(1, id);
ResultSet results = stmt.execute();
...
The problem is that the developer has failed to consider all of the possible values of id. Although the
interface generates a list of invoice identifiers that belong to the current user, an attacker might bypass this
interface to request any desired invoice. Because the code in this example does not check to ensure that
the user has permission to access the requested invoice, it will display any invoice, even if it does not
belong to the current user. Some think that in the mobile world, classic web application vulnerabilities, such
as database access control errors, do not make sense -- why would the user attack themself? However,
keep in mind that the essence of mobile platforms is applications that are downloaded from various sources
and run alongside each other on the same device. The likelihood of running a piece of malware next to a
banking application is high, which necessitates expanding the attack surface of mobile applications to
include inter-process communication. Example 2: The following code adapts Example 1 to the Android
platform.
...
 String id = this.getIntent().getExtras().getString("invoiceID");
 String query = "SELECT * FROM invoices WHERE id = ?";
 SQLiteDatabase db = this.openOrCreateDatabase("DB", MODE_PRIVATE,
null);
 Cursor c = db.rawQuery(query, new Object[]{id});
...
A number of modern web frameworks provide mechanisms to perform user input validation (including
Struts and Spring MVC). To highlight the unvalidated sources of input, Fortify Secure Coding Rulepacks
dynamically re-prioritize the issues Fortify Static Code Analyzer reports by lowering their probability of
exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is
in use. We refer to this feature as Context-Sensitive Ranking. To further assist the Fortify user with the
auditing process, the Fortify Software Security Research group makes available the Data Validation project
template that groups the issues into folders based on the validation mechanism applied to their source of
input.
Recommendation
Rather than relying on the presentation layer to restrict values submitted by the user, access control should
be handled by the application and database layers. Under no circumstances should a user be allowed to
retrieve or modify a row in the database without the appropriate permissions. Every query that accesses
Sep 2, 2024, 5:00 PM
© Copyright [2008-2024] Micro Focus or one of its affiliates.
7
the database should enforce this policy, which can often be accomplished by simply including the current
authenticated username as part of the query. Example 3: The following code implements the same
functionality as Example 1 but imposes an additional constraint to verify that the invoice belongs to the
currently authenticated user.
...
userName = ctx.getAuthenticatedUserName();
id = Integer.decode(request.getParameter("invoiceID"));
String query =
 "SELECT * FROM invoices WHERE id = ? AND user = ?";
PreparedStatement stmt = conn.prepareStatement(query);
stmt.setInt(1, id);
stmt.setString(2, userName);
ResultSet results = stmt.execute();
...
And here is an Android equivalent:
...
 PasswordAuthentication pa = authenticator.getPasswordAuthentication();
 String userName = pa.getUserName();
 String id = this.getIntent().getExtras().getString("invoiceID");
 String query = "SELECT * FROM invoices WHERE id = ? AND user = ?";
 SQLiteDatabase db = this.openOrCreateDatabase("DB", MODE_PRIVATE,
null);
 Cursor c = db.rawQuery(query, new Object[]{id, userName});
...
Issue Summary
Engine Breakdown
SCA WebInspect SecurityScope Total
Access Control: Database 3 0 0 3
Total 3 0 0 3
Access Control: Database High
URL: null
TCSBaNCSQueryMicroservices/src/com/tcs/bancs/microservices/impl/
MigenqDetailsRepositoryImpl.java, line 192 (Access Control: Database) High
Issue Details
Kingdom: Security Features
Scan Engine: SCA (Data Flow)
Sep 2, 2024, 5:00 PM
© Copyright [2008-2024] Micro Focus or one of its affiliates.
8
Access Control: Database High
URL: null
TCSBaNCSQueryMicroservices/src/com/tcs/bancs/microservices/impl/
MigenqDetailsRepositoryImpl.java, line 192 (Access Control: Database) High
Source Details
Source: getCustomerDetails(0)
From: com.tcs.bancs.microservices.services.CHKDService.getCustomerDetails
File: TCSBaNCSQueryMicroservices/src/com/tcs/bancs/microservices/services/CHKDServi
ce.java:124
URL: null
121  @PostMapping(value = { "/CHKD" }, produces = { "application/json" })
122  @CrossOrigin()
123  @JsonIgnore
124  public String getCustomerDetails(@RequestBody(required = 
true)RequestBean reqbean,HttpServletRequest request, @RequestHeader 
HttpHeaders headers, HttpServletResponse response) throws SerialException, 
SQLException, IOException, RrnException, SrcException
125  {
126  try {
127  String[] arr = {bancsTraceState, masterDQType, bancsHost, fnsSysnum, 
ctrlSysnum, daySysnum, nightSysnum, non24hsum, defRMode, masterDB1, 
masterDB2, servicesFlag};
Sink Details
Sink: com.tcs.bancs.microservices.repository.ref.Migenq_t2DetailRefRepo.fetchData()
Enclosing Method: updateResponse()
File: TCSBaNCSQueryMicroservices/src/com/tcs/bancs/microservices/impl/
MigenqDetailsRepositoryImpl.java:192
Taint Flags: PRIMARY_KEY, WEB, XSS
189  }
190  }
191  else if (Logsaver == 2) {
192  Migenq_t2 fetchedRows = dayRepo2.fetchData(PK_REQ_REF_NO);
193  String authenticatedPkRef = fetchedRows.getMigpk().getPK_REQ_REF_NO();
194  int updatedRows = dayRepo2.updateResponse(RESPONSE_STATUS, ERROR_CODE, ERROR_DESCRIPTION, 
clob, RESP_STR, authenticatedPkRef);
195  if (updatedRows == 0) {
TCSBaNCSQueryMicroservices/src/com/tcs/bancs/microservices/impl/
MigenqDetailsRepositoryImpl.java, line 200 (Access Control: Database) High
Issue Details
Kingdom: Security Features
Scan Engine: SCA (Data Flow)
Source Details
Source: getCustomerDetails(0)
Sep 2, 2024, 5:00 PM
© Copyright [2008-2024] Micro Focus or one of its affiliates.
9
Access Control: Database High
URL: null
TCSBaNCSQueryMicroservices/src/com/tcs/bancs/microservices/impl/
MigenqDetailsRepositoryImpl.java, line 200 (Access Control: Database) High
From: com.tcs.bancs.microservices.services.CHKDService.getCustomerDetails
File: TCSBaNCSQueryMicroservices/src/com/tcs/bancs/microservices/services/CHKDServi
ce.java:124
URL: null
121  @PostMapping(value = { "/CHKD" }, produces = { "application/json" })
122  @CrossOrigin()
123  @JsonIgnore
124  public String getCustomerDetails(@RequestBody(required = 
true)RequestBean reqbean,HttpServletRequest request, @RequestHeader 
HttpHeaders headers, HttpServletResponse response) throws SerialException, 
SQLException, IOException, RrnException, SrcException
125  {
126  try {
127  String[] arr = {bancsTraceState, masterDQType, bancsHost, fnsSysnum, 
ctrlSysnum, daySysnum, nightSysnum, non24hsum, defRMode, masterDB1, 
masterDB2, servicesFlag};
Sink Details
Sink: com.tcs.bancs.microservices.repository.ref.Migenq_t3DetailRefRepo.fetchData()
Enclosing Method: updateResponse()
File: TCSBaNCSQueryMicroservices/src/com/tcs/bancs/microservices/impl/
MigenqDetailsRepositoryImpl.java:200
Taint Flags: PRIMARY_KEY, WEB, XSS
197  }
198  }
199  else if (Logsaver == 0) {
200  Migenq_t3 fetchedRows = dayRepo3.fetchData(PK_REQ_REF_NO);
201  String authenticatedPkRef = fetchedRows.getMigpk().getPK_REQ_REF_NO();
202  int updatedRows = dayRepo3.updateResponse(RESPONSE_STATUS, ERROR_CODE, ERROR_DESCRIPTION, 
clob, RESP_STR, authenticatedPkRef);
203  if (updatedRows == 0) {
TCSBaNCSQueryMicroservices/src/com/tcs/bancs/microservices/impl/
MigenqDetailsRepositoryImpl.java, line 184 (Access Control: Database) High
Issue Details
Kingdom: Security Features
Scan Engine: SCA (Data Flow)
Source Details
Source: getCustomerDetails(0)
From: com.tcs.bancs.microservices.services.CHKDService.getCustomerDetails
File: TCSBaNCSQueryMicroservices/src/com/tcs/bancs/microservices/services/CHKDServi
ce.java:124
Sep 2, 2024, 5:00 PM
© Copyright [2008-2024] Micro Focus or one of its affiliates.
10
Access Control: Database High
URL: null
TCSBaNCSQueryMicroservices/src/com/tcs/bancs/microservices/impl/
MigenqDetailsRepositoryImpl.java, line 184 (Access Control: Database) High
URL: null
121  @PostMapping(value = { "/CHKD" }, produces = { "application/json" })
122  @CrossOrigin()
123  @JsonIgnore
124  public String getCustomerDetails(@RequestBody(required = 
true)RequestBean reqbean,HttpServletRequest request, @RequestHeader 
HttpHeaders headers, HttpServletResponse response) throws SerialException, 
SQLException, IOException, RrnException, SrcException
125  {
126  try {
127  String[] arr = {bancsTraceState, masterDQType, bancsHost, fnsSysnum, 
ctrlSysnum, daySysnum, nightSysnum, non24hsum, defRMode, masterDB1, 
masterDB2, servicesFlag};
Sink Details
Sink: com.tcs.bancs.microservices.repository.ref.Migenq_t1DetailRefRepo.fetchData()
Enclosing Method: updateResponse()
File: TCSBaNCSQueryMicroservices/src/com/tcs/bancs/microservices/impl/
MigenqDetailsRepositoryImpl.java:184
Taint Flags: PRIMARY_KEY, WEB, XSS
181  int Logsaver = dayCount % 3;
182
183  if (Logsaver == 1) {
184  Migenq_t1 fetchedRows = dayRepo1.fetchData(PK_REQ_REF_NO);
185  String authenticatedPkRef = fetchedRows.getMigpk().getPK_REQ_REF_NO();
186  int updatedRows = dayRepo1.updateResponse(RESPONSE_STATUS, ERROR_CODE, ERROR_DESCRIPTION, 
clob, RESP_STR, authenticatedPkRef);
187  if (updatedRows == 0) {

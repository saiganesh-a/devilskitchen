package com.tcs.bancs.microservices.services;

import java.io.IOException;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Properties;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.sql.rowset.serial.SerialException;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.http.HttpHeaders;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.tcs.bancs.microservices.aggregator.AggregationServiceImpl;
import com.tcs.bancs.microservices.bean.request.RequestBean;
import com.tcs.bancs.microservices.config.CacheConfig;
import com.tcs.bancs.microservices.configuration.PropertyLoader;
import com.tcs.bancs.microservices.exception.RrnException;
import com.tcs.bancs.microservices.exception.SrcException;
import com.tcs.bancs.microservices.impl.MigenqDetailsRepositoryImpl;

import com.tcs.bancs.microservices.jvm.*;
import com.tcs.bancs.microservices.jvm.JVMCMOB;

import com.tcs.bancs.microservices.util.DBProcess;
import com.tcs.bancs.microservices.util.DaoUtilities;
import com.tcs.bancs.microservices.util.FrameworkConstants;

import com.tcs.bancs.microservices.services.Response;
import com.tcs.bancs.microservices.java.Error_Description;
//import com.tcs.bancs.microservices.java.teller.Teller_Validation;
//import com.tcs.bancs.microservices.java.teller.Teller_Validation.*;
//import com.tcs.bancs.microservices.java.branch.*;
import com.tcs.bancs.microservices.java.validate.*;


import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;

@RestController
@Api(value = "Aggregation_API", description = " ", tags = { "Aggregation API" })
@RequestMapping("/")
@Cacheable
@CacheEvict
public class CSRCService {
	private static boolean filterFlag = false;
	@Autowired
	AggregationServiceImpl aggregationServiceImpl;

	@Autowired
	DBProcess dbprocess;
	
	@Autowired
    MigenqDetailsRepositoryImpl migDetails;

	@Autowired
	DaoUtilities daoUtil;

	@Autowired
	HttpServletRequest HttpServletRequest;
	
    @Value("${UTENVCALS-BANCS-TRACE-STATE}")
    private String bancsTraceState;
    
    @Value("${UTENVCALS-MASTER-DQPTYPE}")
    private String masterDQType;
    
    @Value("${UTENVCALS-BANCS-HOST}")
    private byte bancsHost;
    
    @Value("${UTENVCALS-FNS-SYSNUM}")
    private byte fnsSysnum;
    
    @Value("${UTENVCALS-CTRL-SYSNUM}")
    private byte ctrlSysnum;
    
    @Value("${UTENVCALS-DAY-SYSNUM}")
    private byte daySysnum;
    
    @Value("${UTENVCALS-NIGHT-SYSNUM}")
    private byte nightSysnum;
    
    @Value("${UTENVCALS-NON24H-SYSNUM}")
    private byte non24hsum;
    
    @Value("${UTENVCALS-DEF-RMODE}")
    private String defRMode;
    
    @Value("${UTENVCALS-MASTER-DB-1}")
    private String masterDB1;
    
    @Value("${UTENVCALS-MASTER-DB-2}")
    private String masterDB2;
    
    @Value("${UTENVCALS-SERVICES-FLAG}")
    private String servicesFlag;

	Logger logger = LoggerFactory.getLogger(CSRCService.class);

	String sourceAuth = CacheConfig.frameworkConfigProperties.getProperty(FrameworkConstants.LOOKUP_FILES_PATH);
	String IP_Configuration_Path = CacheConfig.frameworkConfigProperties.getProperty(FrameworkConstants.LOOKUP_FILES_PATH);
	
	Properties sId = PropertyLoader.readPropertyFile(new String(sourceAuth + "/SourceIdList.properties"));
	Properties ipprop = PropertyLoader.readPropertyFile(new String(IP_Configuration_Path + "/IpConfigMaster.properties"));
	
	public String finalResponse;
	
	private final DBConnectionController dbconnection;
	private final Response responseObj;
	
	@Autowired
	public CSRCService(DBConnectionController dbconnection, Response responseObj) {
		this.dbconnection = dbconnection;
		this.responseObj = responseObj;
	}
	
	  Error_Description errdesc = new Error_Description();
	  Validate_Teller_Branch_Service  validate = new Validate_Teller_Branch_Service();
	  
	  JVMUTENV jvmutenv = new JVMUTENV();
	  LsWaCallCode callCode = new LsWaCallCode();
	  LsWaOptCode optcode = new LsWaOptCode();
	  LsLsEnvcaRecArea commonarea = new LsLsEnvcaRecArea();
	  
	  JVMCSRC		jvmcsrc		= new JVMCSRC();
	  LsFirstName	csinput1	= new LsFirstName();
	  LsLastName	csinput2	= new LsLastName();
	  LsDateOfBirth	csinput3	= new LsDateOfBirth();  
	  LsCsDataOut 	csoutput1	= new LsCsDataOut();
	  LsCsNoOfRecords csoutput2	= new LsCsNoOfRecords();
	  LsCsErrorMsgNo  csoutput3	= new LsCsErrorMsgNo();
	  
	  JVMSCPF		jvmscpf		= new JVMSCPF();
	  LsPfNumber	pfinput1	= new LsPfNumber();
	  LsPfDataOut 	pfoutput1	= new LsPfDataOut();
	  LsPfNoOfRecords pfoutput2	= new LsPfNoOfRecords();
	  LsPfErrorMsgNo  pfoutput3	= new LsPfErrorMsgNo();
	  
	  JVMCMOB	jvmcmob = new JVMCMOB();
	  LsMobNumber cminput1 = new LsMobNumber();
	  LsDataOut  cmoutput1 = new LsDataOut();
	  LsNoOfRecords cmoutput2 = new LsNoOfRecords();
	  LsErrorMsgNo cmoutput3 = new LsErrorMsgNo(); 
	  
  
	@SuppressWarnings({ "unchecked", "rawtypes", "static-access" })
	@ApiOperation(value = "Call COB code", notes = "Retrieve cehck Digit:This API is used to fetch accountNum with checkdigit.")
	@PostMapping(value = { "/CSRC" }, produces = { "application/json" })
	@CrossOrigin()
	@JsonIgnore
	public String getCustomerDetails(@RequestBody(required = true)RequestBean reqbean,HttpServletRequest request, @RequestHeader HttpHeaders headers, HttpServletResponse response) throws SerialException, SQLException, IOException, RrnException, SrcException 
	{
		String callcode = "S";
		String opt  = "";
		masterDB1 = StringUtils.rightPad(masterDB1, 15);
		masterDB2 = StringUtils.rightPad(masterDB2, 15);
		String lsRecArea = bancsTraceState + masterDQType + bancsHost + fnsSysnum + ctrlSysnum + daySysnum + nightSysnum + non24hsum + defRMode + masterDB1 + masterDB2 + servicesFlag;
		callCode.setLsWaCallCode(callcode);
		commonarea.setUtenvcalsBancsTraceState(bancsTraceState);
		commonarea.setUtenvcalsMasterDqptype(masterDQType);
		commonarea.setUtenvcalsBancsHost(bancsHost);
		commonarea.setUtenvcalsFnsSysnum(fnsSysnum);
		commonarea.setUtenvcalsCtrlSysnum(ctrlSysnum);
		commonarea.setUtenvcalsDaySysnum(daySysnum);
		commonarea.setUtenvcalsNightSysnum(nightSysnum);
		commonarea.setUtenvcalsNon24hSysnum(non24hsum);
		commonarea.setUtenvcalsDefRmode(defRMode);
		commonarea.setUtenvcalsMasterDb1(masterDB1);
		commonarea.setUtenvcalsMasterDb2(masterDB2);
		commonarea.setUtenvcalsServicesFlag(servicesFlag);
		String IPAddress = request.getHeader("X-Forwarded-For");
		String remoteAddress = request.getRemoteAddr();
		DateTimeFormatter entryDate1 = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss:SSS");
		LocalDateTime  time = LocalDateTime.now();
		String entryDate = entryDate1.format(time);
		String time_1 = time.toString();
	
        try {jvmutenv.JVMUTENV(callCode, optcode, commonarea);} 
        catch (Exception e) { e.printStackTrace(); }
		String refno	= reqbean.getrefno();
		String tellerno = reqbean.gettellno();
		String branchno	= reqbean.getbranchno();
		String inp_opt  = reqbean.getOpt();
		String fname    = reqbean.getfirstname();
		String lname	= reqbean.getlastname();
		String dob		= reqbean.getdob();
		String pfno		= reqbean.getpfno();
		String mobno    = reqbean.getmobno();
		String out_response = "";
		String errno		= "";
	    String noOfrecords	= "";
	    String errDesc 		= "";
	    String serviceno = "000001";
	    
	    //entry
	    migDetails.saveInitialRequest(reqbean.toString(), remoteAddress, tellerno, refno, serviceno, entryDate, IPAddress);
	    
		char dbConnection_flag = dbconnection.establishConnection("01");

		
		System.out.println(tellerno + branchno + serviceno);
		List<String> Branchres = validate.validateTellerBranchService(tellerno, branchno, serviceno, callcode, inp_opt, lsRecArea);
		System.out.println(Branchres + "hello rohith");
//		String Branchres = br.validateBranch(tellerno, branchno, serviceid, callcode, optarea, lsRecArea);
		System.out.println("Branchres :" + Branchres);
		String allowBranchFlag = Branchres.get(0);
		errno = Branchres.get(1);
//		if(true)
//		{
//
//			List<String> res = tellerValidation.Validate_Teller_Service_ID(tellerno, serviceno, callcode, lsRecArea);
//			String allowTellerFlag = res.get(0);
//			errno = res.get(1);
////			System.out.println("Branch aloow flag :" + allowBranchFlag + "errno : " + errno);
			if(allowBranchFlag.equals("Y")) 
			{
				if(dbConnection_flag == 'Y') 
				{
					if(inp_opt.equals("01"))
					{
						csinput1.setLsFirstName(fname);
						csinput2.setLsLastName(lname);
						csinput3.setLsDateOfBirth(dob);
						try {jvmcsrc.JVMCSRC(csinput1, csinput2, csinput3, csoutput1, csoutput2, csoutput3);} 
						catch (Exception e) { e.printStackTrace(); }
						out_response	= csoutput1.getLsCsDataOut();
						noOfrecords		= csoutput2.getLsCsNoOfRecords();
						errno			= csoutput3.getLsCsErrorMsgNo();			
					}
					else if(inp_opt.equals("02"))
					{
						pfinput1.setLsPfNumber(pfno);
						try {jvmscpf.JVMSCPF(pfinput1, pfoutput1, pfoutput2, pfoutput3);} 
						catch (Exception e) { e.printStackTrace(); }					
						out_response	= pfoutput1.getLsPfDataOut();
						noOfrecords		= pfoutput2.getLsPfNoOfRecords();
						errno			= pfoutput3.getLsPfErrorMsgNo();
					}
					else if(inp_opt.contentEquals("03"))
					{
						//mob number
						cminput1.setLsMobNumber(mobno);
						try {jvmcmob.JVMCMOB(cminput1, cmoutput1, cmoutput2, cmoutput3);} 
						catch (Exception e) { e.printStackTrace(); }					
						out_response	= cmoutput1.getLsDataOut();
						noOfrecords		= cmoutput2.getLsNoOfRecords();
						errno			= cmoutput3.getLsErrorMsgNo();
					
					}
				}
				else { errno = "155"; }
			}
			else { errno = "155"; }
		
		if(errno.equals("0000")) 
		{
			finalResponse = responseObj.getResponse(out_response, refno, tellerno, branchno);
			System.out.println("before update");
			migDetails.updateResponse(refno, serviceno, "Y", finalResponse, errno, "Ok! Success", entryDate);
			System.out.println("after update");
		}
		else 
		{
			errDesc = errdesc.getErrDesc(errno, callcode, opt, lsRecArea);
			finalResponse = responseObj.getErrorResponse(errno, errDesc, refno, tellerno, branchno);
			migDetails.updateResponse(refno, serviceno, "N", finalResponse, errno, errDesc, entryDate);
		}
			
		return finalResponse;
		
	} 		
}

-----------------------------------


package com.tcs.bancs.microservices.impl;

import java.io.IOException;
import java.sql.Clob;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Base64;

import javax.sql.rowset.serial.SerialException;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.OptimisticLockingFailureException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Isolation;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.transaction.interceptor.TransactionAspectSupport;

//import com.tcs.bancs.microservices.RequestBean_CbsSix;
import com.tcs.bancs.microservices.db.model.Migenq_t1;
import com.tcs.bancs.microservices.db.model.Migenq_t2;
import com.tcs.bancs.microservices.db.model.Migenq_t3;
import com.tcs.bancs.microservices.db.model.Migenqpk_t1;
import com.tcs.bancs.microservices.db.model.Migenqpk_t2;
import com.tcs.bancs.microservices.db.model.Migenqpk_t3;
import com.tcs.bancs.microservices.exception.RrnException;
import com.tcs.bancs.microservices.exception.SrcException;

import com.tcs.bancs.microservices.repository.day.Migenq_t1DetailDayRepo;
import com.tcs.bancs.microservices.repository.ref.Migenq_t1DetailRefRepo;
import com.tcs.bancs.microservices.repository.ref.Migenq_t2DetailRefRepo;
//import com.tcs.log.utils.ClobToStringConverter;
//import com.tcs.log.utils.encryptLog;
import com.tcs.bancs.microservices.repository.ref.Migenq_t3DetailRefRepo;

@Service

public class MigenqDetailsRepositoryImpl {

    private final Migenq_t1DetailRefRepo dayRepo1;
    private final Migenq_t2DetailRefRepo dayRepo2;
    private final Migenq_t3DetailRefRepo dayRepo3;

    public MigenqDetailsRepositoryImpl(Migenq_t1DetailRefRepo dayRepo1, Migenq_t2DetailRefRepo dayRepo2, Migenq_t3DetailRefRepo dayRepo3) {
        super();
        this.dayRepo1 = dayRepo1;
        this.dayRepo2 = dayRepo2;
        this.dayRepo3 = dayRepo3;
    }
    
//    @Transactional(isolation = Isolation.SERIALIZABLE)
    public boolean saveInitialRequest(String REQ_STR, String CLIENT_IP, String TELLER_ID, String PK_REQ_REF_NO, String SRC_ID, String RECD_TIME, String IP_ADDRESS) throws SerialException, SQLException, IOException, RrnException, SrcException {

        DateTimeFormatter entryDate = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss:SSS");
        DateTimeFormatter entryDate1 = DateTimeFormatter.ofPattern("yyyy-MM-dd");
        LocalDateTime time = LocalDateTime.now();
        LocalDate date = LocalDate.now();
        int dayCount = date.getDayOfMonth();
        int Logsaver = dayCount % 3;

        if (PK_REQ_REF_NO == null || PK_REQ_REF_NO.length() >= 26 || PK_REQ_REF_NO.isEmpty()) {
            PK_REQ_REF_NO = " ";
        }
        if (SRC_ID == null || SRC_ID.length() > 6 || SRC_ID.isEmpty()) {
            SRC_ID = " ";
        }

        if (PK_REQ_REF_NO == null) {
            throw new RrnException();
        } else if (SRC_ID == null) {
            throw new SrcException();
        }

        if (Logsaver == 1) {
            Migenq_t1 mig = new Migenq_t1();
            Migenqpk_t1 pk = new Migenqpk_t1();

            pk.setPK_REQ_REF_NO(PK_REQ_REF_NO);
            pk.setSRC_ID(SRC_ID);
            if (IP_ADDRESS == null || IP_ADDRESS.isEmpty() || IP_ADDRESS.length() > 20) {
                mig.setCLIENT_IP(" ");
            } else {
                mig.setCLIENT_IP(IP_ADDRESS);
            }
            if (TELLER_ID == null || TELLER_ID.isEmpty() || TELLER_ID.length() < 1 || TELLER_ID.matches(" ")) {
                mig.setTELLER_ID(" ");
            } else if (TELLER_ID.length() > 10) {
                mig.setTELLER_ID(TELLER_ID.substring(TELLER_ID.length() - 10, TELLER_ID.length()));
            } else {
                mig.setTELLER_ID(TELLER_ID);
            }

            pk.setENTRY_DATE(entryDate1.format(time));
            mig.setTXN_NO("070805");
            mig.setTXN_NAME("accountChannelEnq");
            mig.setREQ_STR(REQ_STR);
            mig.setRESP_STR("");  // Initially empty response string
            pk.setRECD_TIME(RECD_TIME);
            mig.setRESP_TIME(entryDate.format(time));
            mig.setMigpk(pk);
            dayRepo1.save(mig);

        } else if (Logsaver == 2) {
            Migenq_t2 mig2 = new Migenq_t2();
            Migenqpk_t2 pk2 = new Migenqpk_t2();

            pk2.setPK_REQ_REF_NO(PK_REQ_REF_NO);
            pk2.setSRC_ID(SRC_ID);
            if (IP_ADDRESS == null || IP_ADDRESS.isEmpty() || IP_ADDRESS.length() > 20) {
                mig2.setCLIENT_IP(" ");
            } else {
                mig2.setCLIENT_IP(IP_ADDRESS);
            }
            if (TELLER_ID == null || TELLER_ID.isEmpty() || TELLER_ID.length() < 1 || TELLER_ID.matches(" ")) {
                mig2.setTELLER_ID(" ");
            } else if (TELLER_ID.length() > 10) {
                mig2.setTELLER_ID(TELLER_ID.substring(TELLER_ID.length() - 10, TELLER_ID.length()));
            } else {
                mig2.setTELLER_ID(TELLER_ID);
            }

            mig2.setENTRY_DATE(entryDate1.format(time));
            mig2.setTXN_NO("070805");
            mig2.setTXN_NAME("accountChannelEnq");
            mig2.setREQ_STR(REQ_STR);
            mig2.setRESP_STR("Success");  // Initially empty response string
            mig2.setRECD_TIME(RECD_TIME);
            mig2.setRESP_TIME(entryDate.format(time));
            mig2.setMigpk(pk2);
            dayRepo2.save(mig2);

        } else if (Logsaver == 0) {
            Migenq_t3 mig3 = new Migenq_t3();
            Migenqpk_t3 pk3 = new Migenqpk_t3();

            pk3.setPK_REQ_REF_NO(PK_REQ_REF_NO);
            pk3.setSRC_ID(SRC_ID);
            if (IP_ADDRESS == null || IP_ADDRESS.isEmpty() || IP_ADDRESS.length() > 20) {
                mig3.setCLIENT_IP(" ");
            } else {
                mig3.setCLIENT_IP(IP_ADDRESS);
            }
            if (TELLER_ID == null || TELLER_ID.isEmpty() || TELLER_ID.length() < 1 || TELLER_ID.matches(" ")) {
                mig3.setTELLER_ID(" ");
            } else if (TELLER_ID.length() > 10) {
                mig3.setTELLER_ID(TELLER_ID.substring(TELLER_ID.length() - 10, TELLER_ID.length()));
            } else {
                mig3.setTELLER_ID(TELLER_ID);
            }

//            pk3.setENTRY_DATE(entryDate1.format(time));
//            mig3.setTXN_NO("070805");
//            mig3.setTXN_NAME("accountChannelEnq");
//            mig3.setREQ_STR(REQ_STR);
//           mig3.setRESP_STR("Success");  // Initially empty response string
//            pk3.setRECD_TIME(RECD_TIME);
//            mig3.setRESP_TIME(entryDate.format(time));
//            mig3.setMigpk(pk3);
//            dayRepo3.save(mig3);
            
			mig3.setENTRY_DATE(entryDate1.format(time));
			mig3.setTXN_NO("070805");
			mig3.setTXN_NAME("accountChannelEnq");							
			mig3.setRESPONSE_STATUS(" ");
			mig3.setERROR_CODE(" ");
			mig3.setERROR_DESCRIPTION(" ");
			mig3.setREQ_STR(REQ_STR);
			mig3.setRESP_STR(" ");
			mig3.setRECD_TIME(RECD_TIME);
			mig3.setRESP_TIME(entryDate.format(time));
			mig3.setMigpk(pk3);
			Clob clob=new javax.sql.rowset.serial.SerialClob(" ".toCharArray());
	        mig3.setRESPONSE_STRING(clob);
	        dayRepo3.save(mig3);
        }

        return true;
    }

    @Transactional(isolation = Isolation.SERIALIZABLE)
    public boolean updateResponse(String PK_REQ_REF_NO, String SRC_ID, String RESPONSE_STATUS, String RESPONSE_STRING, String ERROR_CODE, String ERROR_DESCRIPTION, String RECD_TIME) throws SerialException, SQLException {

        DateTimeFormatter entryDate = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss:SSS");
        DateTimeFormatter entryDate1 = DateTimeFormatter.ofPattern("yyyy-MM-dd");
        LocalDateTime time = LocalDateTime.now();
        Clob clob = new javax.sql.rowset.serial.SerialClob(RESPONSE_STRING.toCharArray());

        int Logsaver = LocalDate.now().getDayOfMonth() % 3;

//        if (PK_REQ_REF_NO == null) {
//            throw new RrnException();
//        } else if (SRC_ID == null) {
//            throw new SrcException();
//        }
try {
        if (Logsaver == 1) {
        	Migenqpk_t1 pk = new Migenqpk_t1();
        	pk.setPK_REQ_REF_NO(PK_REQ_REF_NO);
        	pk.setSRC_ID(SRC_ID);
        	pk.setRECD_TIME(RECD_TIME);
        	pk.setENTRY_DATE(entryDate1.format(time));
     
            Migenq_t1 mig = dayRepo1.findById(pk).orElseThrow(() -> new RuntimeException("Record not found"));
            mig.setRESPONSE_STATUS(RESPONSE_STATUS);
            mig.setERROR_CODE(ERROR_CODE);
            mig.setERROR_DESCRIPTION(ERROR_DESCRIPTION);
            mig.setRESPONSE_STRING(clob);
            mig.setRESP_TIME(entryDate.format(time));
            dayRepo1.save(mig);

        } else if (Logsaver == 2) {
        	Migenqpk_t2 pk = new Migenqpk_t2();
        	pk.setPK_REQ_REF_NO(PK_REQ_REF_NO);
        	pk.setSRC_ID(SRC_ID);
//        	pk.setRECD_TIME(RECD_TIME);
//        	pk.setENTRY_DATE(entryDate1.format(time));
//        	System.out.println("pk : " + pk + pk.getPK_REQ_REF_NO() + pk.getSRC_ID() + pk.getRECD_TIME() +pk.getENTRY_DATE());
        	System.out.println("Hi" + dayRepo2.findById(pk));
            Migenq_t2 mig2 = dayRepo2.findById(pk).orElseThrow(() -> new RuntimeException("Record not found"));
            System.out.println("Mig2" +mig2);
            mig2.setRESPONSE_STATUS(RESPONSE_STATUS);
            mig2.setERROR_CODE(ERROR_CODE);
            mig2.setRESP_STR("Success");
            mig2.setERROR_DESCRIPTION(ERROR_DESCRIPTION);
            mig2.setRESPONSE_STRING(clob);
            mig2.setRESP_TIME(entryDate.format(time));
            System.out.println("before update---------------------------------------------------------------");
            dayRepo2.save(mig2);
            System.out.println("after update");

        } else if (Logsaver == 0) {
        	Migenqpk_t3 pk = new Migenqpk_t3();
        	pk.setPK_REQ_REF_NO(PK_REQ_REF_NO);
        	pk.setSRC_ID(SRC_ID);
//        	pk.setRECD_TIME(RECD_TIME);
//        	pk.setENTRY_DATE(entryDate1.format(time));
            Migenq_t3 mig3 = dayRepo3.findById(pk).orElseThrow(() -> new RuntimeException("Record not found"));
            mig3.setRESPONSE_STATUS(RESPONSE_STATUS);
            mig3.setERROR_CODE(ERROR_CODE);
            mig3.setERROR_DESCRIPTION(ERROR_DESCRIPTION);
            mig3.setRESPONSE_STRING(clob);
            mig3.setRESP_TIME(entryDate.format(time));
            System.out.println("before update---------------------------------------------------------------");
            dayRepo3.save(mig3);
            System.out.println("after update@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
        }
}catch (OptimisticLockingFailureException e) {
    // Handle the optimistic locking failure, trigger rollback and log the error
    System.err.println("Optimistic lock failed####################################################: " + e.getMessage());
    TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
    return false;
} catch (Exception e) {
    // Catch other exceptions, trigger rollback and log the error
    System.err.println("Error occurred%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%: " + e.getMessage());
    TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
    return false;
}
        return true;
    }
}
----------------------------

{

"Reference Number" : "5432100",
"Teller Number" : "164",
"Branch Number" : "04234",
"option" : "02",
"pf_number" : "00000172"

}

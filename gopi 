// Global variable to track cancel flag
var cancelFlag = false;

// Function to set the cancel flag
function setCancelFlag(flag) {
    cancelFlag = flag;
}

// Function to check and handle cancel flag
function handleCancelFlag() {
    if (cancelFlag) {
        var transmitButton = document.getElementById("Transmit");
        if (transmitButton) {
            transmitButton.disabled = true;
        }
        // Reset the flag after handling
        cancelFlag = false;
    }
}

// Existing sendFlagout function (updated)
function sendFlagout() {
    var sendFlag = true; // Example logic to determine when to set the flag
    setCancelFlag(sendFlag);

    // Additional actions as needed
    var oFlows = window.document.forms[0].getFlowComponent();
    oFlows.returnValue = "True";
    var sMessageBody = "<screenData><sendFlag>" + sendFlag + "</sendFlag><TranNo>060777</TranNo></screenData>";
    oFlows.startFlow(window.document.body, null, "060777flow", "VerifyFlag", sMessageBody, true);

    return true;
}

// Other functions remain the same
function validateFun() {
    var CustNo = document.getElementById("accntNumber").value;
    if (CustNo != "") {
        var oFlows = window.document.forms[0].getFlowComponent();
        oFlows.returnValue = "True";
        var sMessageBody = "<screenData><accntNumber>" + CustNo + "</accntNumber><TranNo>060777</TranNo></screenData>";
        oFlows.startFlow(window.document.body, null, "060777flow", "StartHost", sMessageBody, true);
        return true;
    } else {
        alert("Account Number is required");
        return false;
    }
}

function Proceed() {
    alert("Proceed working");
}

function FocusOnScreen() {
    try {
        window.dialogArguments.document.frames("MainScreen").focus();
    } catch (e) {
        // Handle exception (if any)
    }
    return true;
}
-----------------

<!DOCTYPE html>
<html>
<head>
    <title>067101 CIF: Create/Amend Customer Personal Details</title>
    <meta http-equiv="X-UA-Compatible" content="IE=5" />
    <meta content="Text/html; Charset=UTF-8" http-equiv="Content-type" />
    <link href="../css/Screen.css" type="text/css" rel="stylesheet" />
    <link href="../css/calenderNew.css" type="text/css" rel="stylesheet" />
    <link href="../css/newCBSCommon.css" type="text/css" rel="stylesheet" />
    <link href="../css/newCBSResponsive.css" type="text/css" rel="stylesheet" />
    <script type="text/javascript" src="../js/060777.js"></script>
    <script type="text/javascript">
        // Check and handle cancel flag
        function checkCancelFlag() {
            if (window.opener && window.opener.handleCancelFlag) {
                window.opener.handleCancelFlag();
            }
        }

        // Polling interval to check for cancel flag
        setInterval(checkCancelFlag, 1000);  // Check every second

        window.onload = function() {
            // Optional: Reset any state on page load
        };
    </script>
</head>
<body>
    <form>
        <input type="text" id="accntNumber" name="accntNumber" />
        <button type="button" onclick="validateFun()">Validate</button>
        <button id="Transmit" type="button">Transmit</button>
    </form>
</body>
</html>


---------------

// Global variable to track cancel flag
var cancelFlag = false;

// Function to set the cancel flag
function setCancelFlag(flag) {
    cancelFlag = flag;
    // Dispatch an event to notify other components (if needed)
    var event = new CustomEvent('cancelFlagUpdated', { detail: cancelFlag });
    document.dispatchEvent(event);
}

// Function to check and handle cancel flag
function handleCancelFlag() {
    if (cancelFlag) {
        var transmitButton = document.getElementById("Transmit");
        if (transmitButton) {
            transmitButton.disabled = true;
        }
        // Reset the flag after handling
        cancelFlag = false;
    }
}

// Existing sendFlagout function (updated)
function sendFlagout() {
    var sendFlag = true; // Example logic to determine when to set the flag
    setCancelFlag(sendFlag);

    // Additional actions as needed
    var oFlows = window.document.forms[0].getFlowComponent();
    oFlows.returnValue = "True";
    var sMessageBody = "<screenData><sendFlag>" + sendFlag + "</sendFlag><TranNo>060777</TranNo></screenData>";
    oFlows.startFlow(window.document.body, null, "060777flow", "VerifyFlag", sMessageBody, true);

    return true;
}

// Other functions remain the same
function validateFun() {
    var CustNo = document.getElementById("accntNumber").value;
    if (CustNo != "") {
        var oFlows = window.document.forms[0].getFlowComponent();
        oFlows.returnValue = "True";
        var sMessageBody = "<screenData><accntNumber>" + CustNo + "</accntNumber><TranNo>060777</TranNo></screenData>";
        oFlows.startFlow(window.document.body, null, "060777flow", "StartHost", sMessageBody, true);
        return true;
    } else {
        alert("Account Number is required");
        return false;
    }
}

function Proceed() {
    alert("Proceed working");
}

function FocusOnScreen() {
    try {
        window.dialogArguments.document.frames("MainScreen").focus();
    } catch (e) {
        // Handle exception (if any)
    }
    return true;
}

-----------

<!DOCTYPE html>
<html>
<head>
    <title>067101 CIF: Create/Amend Customer Personal Details</title>
    <meta http-equiv="X-UA-Compatible" content="IE=5" />
    <meta content="Text/html; Charset=UTF-8" http-equiv="Content-type" />
    <link href="../css/Screen.css" type="text/css" rel="stylesheet" />
    <link href="../css/calenderNew.css" type="text/css" rel="stylesheet" />
    <link href="../css/newCBSCommon.css" type="text/css" rel="stylesheet" />
    <link href="../css/newCBSResponsive.css" type="text/css" rel="stylesheet" />
    <script type="text/javascript" src="../js/060777.js"></script>
    <script type="text/javascript">
        // Global variable to track cancel flag
        var cancelFlag = false;

        // Function to set the cancel flag
        function setCancelFlag(flag) {
            cancelFlag = flag;
            // Call function to handle cancel flag in this page
            handleCancelFlag();
        }

        // Function to check and handle cancel flag
        function handleCancelFlag() {
            if (cancelFlag) {
                var transmitButton = document.getElementById("Transmit");
                if (transmitButton) {
                    transmitButton.disabled = true;
                }
                // Reset the flag after handling
                cancelFlag = false;
            }
        }

        // Function to handle updates from 60777.js
        function handleCancelFlagUpdate(event) {
            var newCancelFlag = event.detail;
            if (newCancelFlag !== cancelFlag) {
                cancelFlag = newCancelFlag;
                handleCancelFlag();
            }
        }

        // Add event listener for cancel flag updates
        document.addEventListener('cancelFlagUpdated', handleCancelFlagUpdate);

        // Function to simulate cancel button click
        function cancelClick() {
            // Set cancel flag to true
            setCancelFlag(true);
            // Optional: Perform other actions related to cancel button click
        }

        window.onload = function() {
            // Optional: Initialize any state on page load
        };
    </script>
</head>
<body>
    <form>
        <input type="text" id="accntNumber" name="accntNumber" />
        <button type="button" onclick="validateFun()">Validate</button>
        <button id="Transmit" type="button">Transmit</button>
    </form>
</body>
</html>
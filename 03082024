/** Start of PVCS information ****************************************
 * $Archive:   //fnssnap1/pvcs$/archives/Comlink/c/sharemem.c-arc  $
 * $Revision:   1.3  $
 * $Modtime:   Sep 11 2001 19:31:04  $
 * $Author:   pvcs  $
 * $Date:   Sep 11 2001 21:32:38  $
 * $Log:   //fnssnap1/pvcs$/archives/Comlink/c/sharemem.c-arc  $
 *
 *    Rev 1.3   Sep 11 2001 21:32:38   pvcs
 * Initial check in. BANCS 8.0 D
 ********* End of PVCS Information ************************************/
    /* @(#) sharemem.c version 80.1
       @(#) last updated on 01/02/13 at 18:01:23
       @(#) This file obtained from
       @(#)    /fns/sccs/d/g/c/s.sharemem.c
       @(#)    on 01/09/11 at 19:20:52 */

/*
        Names of all functions defined in this program - sharemem.c :-
                sharemem
                cleanup
                kill_all_areas
                shm_error
                ----*----



*/

/********************************
*
*
* SHAREMEM.C - support code for shared memory access with semaphores
*
*
*       version         date            author          comments
*       1.0             September 92    RPS             original version
*
*                       28-Aug-2012     Suva Sahu       change codes to avoid
*                                                       unwanted warnings for
*                                                       compatibilty in Taukwila platform.
*                                                       Change some function prototype.
*
*
*
* This file contains:
*
*       SHAREMEM - the entry point from COBOL for all shared memory
*       CLEANUP - routine to remove semaphores and shared memory areas
*                       at application termination
*       SHM_ERROR - routine for error message strings with shared memory and
*                       semaphores
*
*********************************/

#include <stdio.h>
#include <errno.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/sem.h>
#include <sys/shm.h>


#include "share.h"


/*************
        Global Variables - for this file only
                required to be able to clean up the shared memory areas
                and semaphores during termination
                                *******************/

static SMCB *smcb = NULL;               /* pointer to SMCB */
static int smcb_sem_id, smcb_shm_id;    /* ids for SMCB */
static byte whoami[2] = {0,0};          /* application name */
static SMCB_ADDR smcb_addr[4]={{0,0,0,NULL},{0,0,0,NULL},{0,0,0,NULL},{0,0,0,NULL}}; /* SMCB Address for 24 hour BANCS */


/*************************************************************
SHAREMEM is part of the FNS library.
The function SHAREMEM is called from COBOL for the following purposes:-
         to create a new SMCB (Shared Memory Control Block)
                        or
         to find the existing SMCB

The function names are declared in $src/LIBRYMIS/SHAREMEM
( -a cobol file) as picture classes.

  SHAREMEM receives the function name from COBOL and uses it in the
switch statement to choose one of the following options(cases):--


        1] INITIALISE :-
                if The Global variable(of the type, structure SMCB)
                is null
                (which means shared memory handler is not initialised
                yet) then the function smcb_init of shminit.c is called

        Within smcb_init sharemem is obtained and address
returned to smcb so that now the shared memory can be accessed
through the pointer smcb.

The pointer p to SHAREDTA(in share.h) stores the semephoreId and
Shared memoryId  points to smcb.

status returned to cobol.(status codes are available in
$src/LIBRYMIS/SHAREMEM)

2] ACCESS :-
If the INITIALISE option has already been called then the
function shm_access of shmaccess.c is called and the return value
of either ATTACH or CREATE is received in status.

If the INITIALISE option has not been called already then
NO_INIT('5') is stored into status to be returned to cobol.

3] DEACCESS :-
If the INITIALISE option has already been called then the
function shm_deaccess of shmaccess.c is called and the return value
of either CALL_FAILED or OK is stored into status to be
returned to cobol.

4] READ_LOCK and 5] UPDATE_LOCK :-
If the INITIALISE option has already been called then the
function shm_lock of shmlock.c is called and the return value
of either OK or CALL_FAILED is returned .

6] READ_UNLOCK and 7] UPDATE_UNLOCK
If the INITIALISE option has already been called then the
function shm_unlock of shmlock.c is called and the return value
of either OK or CALL_FAILED is returned.

8] CHK_SMCB_EXIST
The shmget system call is called for the key of SMCB block without IPC_CREAT
flag. If the system call returns with error ENOENT, then the SMCB doesnot exist
and status SMCB_NOT_EXIST is returned. If it already exists, then status
SMCB_EXIST is returned.
***************************************************************


*/

/*******************
*
* SHAREMEM - COBOL entry point to shared memory handler
*
*       input:  pointer to function (1 byte)
*               pointer to parameter block (SHARE_DATA)
*               pointer to status return (1 byte)
*
*       output: 0 - no errors while processing
*               non-0 - errors while processing
*
*********************/
union semun {
      int val;
      struct semid_ds *buf;
      ushort *array;
};
/********** START OF IR 72970 *****************/
/*SHAREMEM(func,p,status)
    byte *func;
    SHARE_DATA *p;
    byte *status;*/
int SHAREMEM(byte *func, SHARE_DATA *p, byte *status)
/********** END OF IR 72970    ****************/
{
    int retval = 0;                     /* pre-load good return */
    /********** START OF IR 72970 *****************/
    //SMCB *smcb_init();
    /********** END OF IR 72970    ****************/
    int debug = 0;
    /********** START OF IR 72970 *****************/
    //byte shm_access(), shm_deaccess(), shm_lock(), shm_unlock();
    //void cleanup();
    /********** END OF IR 72970 *****************/
    /* Added by Jayakumar R
     * Variables added for new function CHK_SMCB_EXIST implemented
     */
    key_t key_smcb;
    int smcb_shmid;



    { /* get trace state for debugging prints */
      /********** START OF IR 72970 *****************/
      //char *env, *getenv();
       char *env;
      /********** END OF IR 72970    ****************/
      if (env = getenv("BANCS_TRACE_STATE"))
        debug = (!strcmp(env,"ON") || !strcmp(env,"on"));
    }

    if (debug)
        fprintf(stderr,"SHARE_MEM - function: %c\n",*func);

    /* check for SMCB existance */
    {
        int index;
        index = check_smcb_exist(p);
        if (index != -1)
        {
            if (debug)
                fprintf(stderr,"SMCB - existed\n");
            smcb = (SMCB *)smcb_addr[index].address;
            smcb_sem_id = smcb_addr[index].sem_name;
            smcb_shm_id = smcb_addr[index].shm_name;
            /* save parameter application name */
            strncpy((char *)whoami,(const char *)p->appl_name,2);
        }
        else
        {
            if (debug)
                fprintf(stderr,"SMCB - not existed\n");
            smcb = NULL;
        }
    }

    if (smcb) {
        /* verify version in SMCB and this program */

        if (strncmp((const char *)smcb->sys_info.version,(const char *)VID,VER_SIZE)) {
            /* error in version - fail */
            fprintf(stderr,"SMCB - version error - exit\n");
            exit(-1);
        }
        else if (debug)
          fprintf(stderr,"SMCB - version ok\n");
    }

    /* branch to correct handler */
    switch (*func) {
        case INITIALISE: /* initialise shared memory handler */
            if (!smcb) {
                /* no init yet - make smcb, etc. */
                smcb = smcb_init(p, &smcb_sem_id,&smcb_shm_id,debug);

                /* hang a routine to remove the smcb on exit */
                /*if (atexit(cleanup))
                    fprintf(stderr,"ATEXIT failed\n");   EGA */

                /* save parameter application name */
                strncpy((char *)whoami,(const char *)p->appl_name,2);

                /* save parameter info */
                p->address = (void *)smcb;
                p->sem_name = smcb_sem_id;
                p->shm_name = smcb_shm_id;

        if (debug)
            fprintf(stderr, "INSERT into SMCB array\n");

        if (!insert_smcb_addr(p))
        {
            /* good result - shm_init exits on failure */
            *status = OK;

            if (debug)
            {
                print_smcb_address(0);
                print_smcb_address(1);
                print_smcb_address(2);
            }
        }
        else *status = CALL_FAILED;
        }
            else *status = OK;
            break;
        case ACCESS: /* attach to a shared memory area */
            /* only if init has been called */
            if (smcb && whoami[0])
                *status = shm_access(smcb,p,whoami,smcb_sem_id,debug);
            else
                *status = NO_INIT;
            break;
        case DEACCESS: /* detatch from a shared memory area */
            /* only if init has been called */
            if (smcb && whoami[0])
                *status = shm_deaccess(smcb,p,whoami,smcb_sem_id,debug);
            else
                *status = NO_INIT;
            break;
        case READ_LOCK: /* get a read lock */
        case UPDATE_LOCK: /* get an update lock */
            /* only if init has been called */
            if (smcb && whoami[0])
                *status = shm_lock(smcb,p,*func,whoami,smcb_sem_id,debug);
            else
                *status = NO_INIT;
            break;
        case READ_UNLOCK: /* give a read lock */
        case UPDATE_UNLOCK: /* give an update lock */
            /* only if init has been called */
            if (smcb && whoami[0])
                *status = shm_unlock(smcb,p,*func,whoami,smcb_sem_id,debug);
            else
                *status = NO_INIT;
            break;
        case CHK_SMCB_EXIST: /*checks whether smcb already exits - Jayakumar R*/
            *status = SMCB_EXIST;
            if (!smcb) {
                key_smcb = (key_t) (SHM_KMASK | SMCB_KEY | get_sys_id(p->system_id));
                if ((smcb_shmid = shmget(key_smcb,sizeof(SMCB),SMCB_ACCESS)) == -1) {
                    if (errno == ENOENT) {
                        *status = SMCB_NOT_EXIST;
                    }
                }
            }
            break;
        default: /* error */
            fprintf(stderr,"SHAREMEM - invalid function: %c (%x)\n",
                                *func, *func);
            *status = CALL_FAILED;
            retval = 1;
            break;
    }
    return(retval);
}


/***************
*
* CLEANUP - remove semaphores and shared memory at termination
*
*****************/
void
cleanup()
{
    int debug;
    /********** START OF IR 72970 *****************/
    //char *env, *getenv(), *shm_error();
    char *env;
    /********** END OF IR 72970    ****************/
    short procs_left;
    union semun arg;

    /* get trace state for debugging prints */
    if (env = getenv("BANCS_TRACE_STATE"))
        debug = (!strcmp(env,"ON") || !strcmp(env,"on"));

    /* am i the last process on the smcb? */
    if (smcb) {
        if (debug)
            fprintf(stderr,"CLEANUP - %d procs on SMCB\n",
                                        smcb->sys_info.num_procs);

        /* get access to smcb */
        ctl_sem(smcb_sem_id,SMCB_UPDATE_SEM,LOCK_BINARY);
        /* flag process ending */
        procs_left = --(smcb->sys_info.num_procs);
        /* release smcb */
        ctl_sem(smcb_sem_id,SMCB_UPDATE_SEM,UNLOCK_BINARY);

        /* can we remove the smcb - and ALL areas defined in it? */
        if (!procs_left) {
            if (debug)
                fprintf(stderr,"CLEANUP will remove\n");

            /* remove all areas still defined in the AREA_INFO array */
            /* remove all semaphores for above areas */
            kill_all_areas(smcb,debug);

            /* detatch this process from the SMCB */
            if (shmdt((char*) smcb))
                fprintf(stderr,"CLEANUP - cannot detatch SMCB\n");

            /* remove SMCB */
            if (shmctl(smcb_shm_id,IPC_RMID,NULL)) {
                /* error on system call */
                if (debug) {
                    int i = errno;
                    fprintf(stderr,"CLEANUP - cannot remove SHM %d - %s\n",
                                i,shm_error(i));
                }
            }
            /* remove SMCB semaphore */
            if (semctl(smcb_sem_id,0,IPC_RMID)) {
                /* error on system call */
                if (debug) {
                    int i = errno;
                    fprintf(stderr,"CLEANUP - cannot remove SEM %d - %s\n",
                                i,shm_error(i));
                }
            }
        }
        else {
            if (debug)
                fprintf(stderr,"CLEANUP could not remove\n");
            /* detatch this process from the SMCB */
            if (shmdt((char*) smcb))
                fprintf(stderr,"CLEANUP - cannot detatch SMCB\n");
        }
    }
    else if (debug)
        fprintf(stderr,"CLEANUP - no SMCB\n");
}




/*****************
*
* KILL_ALL_AREAS - delete all shared memory areas and semaphores that
*                       all processes have left (no DEACCESS calls)
*       input:  pointer to SMCB
*               integer debugging flag
*       output: none
*
******************/
/********** START OF IR 72970 *****************/
/*kill_all_areas(s,debug)
    SMCB *s;
    int debug;*/
void kill_all_areas(SMCB *s, int debug)
/********** END OF IR 72970    ****************/
{
    short i, j;
    int id;
    union semun arg;

    /* get messy applications from APPL_INFO array */
    for (i = 0; i < NUM_APPL; i++) {
        /* has this appl left stuff? */
        if (s->appl_info[i].area_count) {
            /* stuff left - remove them all */
            for (j = s->appl_info[i].area_ptr;
                        j != LAST_AREA;
                                j = s->area_info[j].next_area)
            {
                /* is there a key here? */
                if (s->area_info[j].area_id) {
                    if (debug)
                        fprintf(stderr,"CLEANUP - removing area %x\n",
                                        s->area_info[j].area_id);
                    /* get memory area for this key */
                    id = shmget(s->area_info[j].area_id,0,AREA_ACCESS);
                    if (id != -1)
                        shmctl(id,IPC_RMID,NULL);
                    /* get semaphores for this key */
                    id = semget(s->area_info[j].area_id,0,AREA_ACCESS);
                    if (id != -1) {
                        semctl(id,0,IPC_RMID);
                    }
                }
            }
        }
    }
}

static char *erange_err = "SEM: val/adj greater than max";
static char *eperm_err = "SEM:,SHM: not super-user or creator";
static char *enoent_err = "SEM: no such semaphore, SHM: no such area";
static char *enospc_err = "SEM: too many sems/undos, SHM: too many areas";
static char *eexist_err = "SEM:,SHM: already exists";
static char *efbig_err = "SEM: out of range";
static char *eagain_err = "SEM: would suspend";
static char *emfile_err = "SHM: too many attached areas";


/**************
*
* SHM_ERROR - return a pointer to an error msg associated w/ shared memory
*               or semaphores - if standard error, call strerror
*       input:  integer number of error
*       output: function return pointer to string
*
***************/
/********** START OF IR 72970 *****************/
/*char *shm_error(num)
    int num;*/
char *shm_error(int num)
/********** END OF IR 72970    ****************/
{
    char *retval;

    switch (num) {
        case ERANGE :
            retval = erange_err;
            break;
        case EPERM :
            retval = eperm_err;
            break;
        case ENOENT :
            retval = enoent_err;
            break;
        case ENOSPC :
            retval = enospc_err;
            break;
        case EFBIG :
            retval = efbig_err;
            break;
        case EAGAIN :
            retval = eagain_err;
            break;
        case EMFILE :
            retval = emfile_err;
            break;
        default :
            retval = strerror(num);
            break;
    }
    return(retval);
}

/********** START OF IR 72970 *****************/
/*int insert_smcb_addr(p)
    SHARE_DATA *p;*/
int insert_smcb_addr(SHARE_DATA *p)
/********** END OF IR 72970    ****************/
{
    int i = 0;
    for (i = 0; i < 4; i++)
    {
        if (smcb_addr[i].address == NULL)
        {
            smcb_addr[i].system_id = p->system_id;
            smcb_addr[i].address = p->address;
            smcb_addr[i].shm_name = p->shm_name;
            smcb_addr[i].sem_name = p->sem_name;
            return 0;
        }
    }
    return 1;
}
/********** START OF IR 72970 *****************/
/*int check_smcb_exist(p)
    SHARE_DATA *p;*/
int check_smcb_exist(SHARE_DATA *p)
/********** END OF IR 72970    ****************/
{
    int i = 0;
    for (i = 0; i < 4; i++)
    {
        if (p->system_id == smcb_addr[i].system_id)
            return i;
    }
    return -1;
}
/********** START OF IR 72970 *****************/
/*int print_smcb_address(i)
int i;*/
void print_smcb_address(int i)
/********** END OF IR 72970    ****************/
{
    {
        fprintf(stderr, "SMCB ARRAY\n");
        fprintf(stderr, "smcb_addr[%d].system_id = [%c]\n", i, smcb_addr[i].system_id);
        /********** START OF IR 72970 ********************/
        //fprintf(stderr, "smcb_addr[%d].address = [%ld]\n", i, (double *)smcb_addr[i].address);
        fprintf(stderr, "smcb_addr[%d].address = [%ld]\n", i, (long)smcb_addr[i].address);
        /********** END OF IR 72970    ****************/
        fprintf(stderr, "smcb_addr[%d].shm_name = [%d]\n", i, smcb_addr[i].shm_name);
        fprintf(stderr, "smcb_addr[%d].sem_name = [%d]\n", i, smcb_addr[i].sem_name);
    }
}
